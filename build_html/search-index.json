[{"content":"<h1 id=\"airbnb-javascript-style-guide\">Airbnb JavaScript Style Guide() {</h1><p><em>A mostly reasonable approach to JavaScript</em></p><p><a href=\"https://www.npmjs.com/package/eslint-config-airbnb\"><img src=\"https://img.shields.io/npm/dm/eslint-config-airbnb.svg\" alt=\"Downloads\"></a>\n<a href=\"https://gitter.im/airbnb/javascript?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/Join Chat.svg\" alt=\"Gitter\"></a></p><p>Other Style Guides</p><ul>\n<li><a href=\"es5/\">ES5</a></li>\n<li><a href=\"react/\">React</a></li>\n<li><a href=\"https://github.com/airbnb/css\">CSS &amp; Sass</a></li>\n<li><a href=\"https://github.com/airbnb/ruby\">Ruby</a></li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"AIRBNB JAVASCRIPT STYLE GUIDE() {"},{"content":"<h2 id=\"airbnb-javascript-style-guide-types\">Types</h2><p>  <a name=\"types--primitives\"></a><a name=\"1.1\"></a></p><ul>\n<li><p><a href=\"#types--primitives\">1.1</a> <strong>Primitives</strong>: When you access a primitive type you work directly on its value.</p>\n<ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n</ul>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\nlet bar </span><span class=\"pun\">=</span><span class=\"pln\"> foo</span><span class=\"pun\">;</span><span class=\"pln\">\n\nbar </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">9</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\nconsole</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">,</span><span class=\"pln\"> bar</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; </span><span class=\"number\"><span class=\"com\">1</span></span><span class=\"com\">, </span><span class=\"number\"><span class=\"com\">9</span></span></span>\n</code></pre>\n<p><a name=\"types--complex\"></a><a name=\"1.2\"></a></p>\n</li>\n<li><p><a href=\"#types--complex\">1.2</a>  <strong>Complex</strong>: When you access a complex type you work on a reference to its value.</p>\n<ul>\n<li><code>object</code></li>\n<li><code>array</code></li>\n<li><code>function</code></li>\n</ul>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">];</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> bar </span><span class=\"pun\">=</span><span class=\"pln\"> foo</span><span class=\"pun\">;</span><span class=\"pln\">\n\nbar</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">9</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\nconsole</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">],</span><span class=\"pln\"> bar</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">]);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; </span><span class=\"number\"><span class=\"com\">9</span></span><span class=\"com\">, </span><span class=\"number\"><span class=\"com\">9</span></span></span>\n</code></pre>\n</li>\n</ul><p><a href=\"#types--primitives\">1.1</a> <strong>Primitives</strong>: When you access a primitive type you work directly on its value.</p><ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n</ul><p><a name=\"types--complex\"></a><a name=\"1.2\"></a></p><p><a href=\"#types--complex\">1.2</a>  <strong>Complex</strong>: When you access a complex type you work on a reference to its value.</p><ul>\n<li><code>object</code></li>\n<li><code>array</code></li>\n<li><code>function</code></li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"TYPES"},{"content":"<h2 id=\"airbnb-javascript-style-guide-references\">References</h2><p>  <a name=\"references--prefer-const\"></a><a name=\"2.1\"></a></p><ul>\n<li><p><a href=\"#references--prefer-const\">2.1</a> Use <code>const</code> for all of your references; avoid using <code>var</code>. eslint: <a href=\"http://eslint.org/docs/rules/prefer-const.html\"><code>prefer-const</code></a>, <a href=\"http://eslint.org/docs/rules/no-const-assign.html\"><code>no-const-assign</code></a></p>\n<blockquote>\n<p>Why? This ensures that you canâ€™t reassign your references, which can lead to bugs and difficult to comprehend code.</p>\n</blockquote>\n<pre><code class=\"lang-js prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">var</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">var</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"references--disallow-var\"></a><a name=\"2.2\"></a></p>\n</li>\n<li><p><a href=\"#references--disallow-var\">2.2</a> If you must reassign references, use <code>let</code> instead of <code>var</code>. eslint: <a href=\"http://eslint.org/docs/rules/no-var.html\"><code>no-var</code></a> jscs: <a href=\"http://jscs.info/rule/disallowVar\"><code>disallowVar</code></a></p>\n<blockquote>\n<p>Why? <code>let</code> is block-scoped rather than function-scoped like <code>var</code>.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">var</span><span class=\"pln\"> count </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">true</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  count </span><span class=\"pun\">+=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good, use the let.</span></span><span class=\"pln\">\nlet count </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">true</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  count </span><span class=\"pun\">+=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"references--block-scope\"></a><a name=\"2.3\"></a></p>\n</li>\n<li><p><a href=\"#references--block-scope\">2.3</a> Note that both <code>let</code> and <code>const</code> are block-scoped.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// const and let only exist in the blocks they are defined in.</span></span><span class=\"pln\">\n</span><span class=\"pun\">{</span><span class=\"pln\">\n  let a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\nconsole</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// ReferenceError</span></span><span class=\"pln\">\nconsole</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">b</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// ReferenceError</span></span>\n</code></pre>\n</li>\n</ul><p><a href=\"#references--prefer-const\">2.1</a> Use <code>const</code> for all of your references; avoid using <code>var</code>. eslint: <a href=\"http://eslint.org/docs/rules/prefer-const.html\"><code>prefer-const</code></a>, <a href=\"http://eslint.org/docs/rules/no-const-assign.html\"><code>no-const-assign</code></a></p><p>Why? This ensures that you canâ€™t reassign your references, which can lead to bugs and difficult to comprehend code.</p><p><a name=\"references--disallow-var\"></a><a name=\"2.2\"></a></p><p><a href=\"#references--disallow-var\">2.2</a> If you must reassign references, use <code>let</code> instead of <code>var</code>. eslint: <a href=\"http://eslint.org/docs/rules/no-var.html\"><code>no-var</code></a> jscs: <a href=\"http://jscs.info/rule/disallowVar\"><code>disallowVar</code></a></p><p>Why? <code>let</code> is block-scoped rather than function-scoped like <code>var</code>.</p><p><a name=\"references--block-scope\"></a><a name=\"2.3\"></a></p><p><a href=\"#references--block-scope\">2.3</a> Note that both <code>let</code> and <code>const</code> are block-scoped.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"REFERENCES"},{"content":"<h2 id=\"airbnb-javascript-style-guide-objects\">Objects</h2><p>  <a name=\"objects--no-new\"></a><a name=\"3.1\"></a></p><ul>\n<li><p><a href=\"#objects--no-new\">3.1</a> Use the literal syntax for object creation. eslint: <a href=\"http://eslint.org/docs/rules/no-new-object.html\"><code>no-new-object</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> item </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Object</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> item </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span></code></pre>\n<p><a name=\"objects--reserved-words\"></a><a name=\"3.2\"></a></p>\n</li>\n<li><p><a href=\"#objects--reserved-words\">3.2</a> If your code will be executed in browsers in script context, donâ€™t use <a href=\"http://es5.github.io/#x7.6.1\">reserved words</a> as keys. It wonâ€™t work in IE8. <a href=\"https://github.com/airbnb/javascript/issues/61\">More info</a>. Itâ€™s OK to use them in ES6 modules and server-side code. jscs: <a href=\"http://jscs.info/rule/disallowIdentifierNames\"><code>disallowIdentifierNames</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> superman </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">default</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> clark</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'kent'</span></span><span class=\"pln\"> </span><span class=\"pun\">},</span><span class=\"pln\">\n  </span><span class=\"kwd\">private</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> superman </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  defaults</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> clark</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'kent'</span></span><span class=\"pln\"> </span><span class=\"pun\">},</span><span class=\"pln\">\n  hidden</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span></code></pre>\n<p><a name=\"objects--reserved-words-2\"></a><a name=\"3.3\"></a></p>\n</li>\n<li><p><a href=\"#objects--reserved-words-2\">3.3</a> Use readable synonyms in place of reserved words. jscs: <a href=\"http://jscs.info/rule/disallowIdentifierNames\"><code>disallowIdentifierNames</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> superman </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">class</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'alien'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> superman </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  klass</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'alien'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> superman </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  type</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'alien'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span></code></pre>\n<p><a name=\"es6-computed-properties\"></a><a name=\"3.4\"></a></p>\n</li>\n<li><p><a href=\"#es6-computed-properties\">3.4</a> Use computed property names when creating objects with dynamic property names.</p>\n<blockquote>\n<p>Why? They allow you to define all the properties of an object in one place.</p>\n</blockquote>\n<p>```javascript</p>\n<p>function getKey(k) {\n  return <code>a key named ${k}</code>;\n}</p>\n<p>// bad\nconst obj = {\n  id: 5,\n  name: â€˜San Franciscoâ€™,\n};\nobj[getKey(â€˜enabledâ€™)] = true;</p>\n<p>// good\nconst obj = {\n  id: 5,\n  name: â€˜San Franciscoâ€™,</p>\n</li>\n</ul><p><a href=\"#objects--no-new\">3.1</a> Use the literal syntax for object creation. eslint: <a href=\"http://eslint.org/docs/rules/no-new-object.html\"><code>no-new-object</code></a></p><p><a name=\"objects--reserved-words\"></a><a name=\"3.2\"></a></p><p><a href=\"#objects--reserved-words\">3.2</a> If your code will be executed in browsers in script context, donâ€™t use <a href=\"http://es5.github.io/#x7.6.1\">reserved words</a> as keys. It wonâ€™t work in IE8. <a href=\"https://github.com/airbnb/javascript/issues/61\">More info</a>. Itâ€™s OK to use them in ES6 modules and server-side code. jscs: <a href=\"http://jscs.info/rule/disallowIdentifierNames\"><code>disallowIdentifierNames</code></a></p><p><a name=\"objects--reserved-words-2\"></a><a name=\"3.3\"></a></p><p><a href=\"#objects--reserved-words-2\">3.3</a> Use readable synonyms in place of reserved words. jscs: <a href=\"http://jscs.info/rule/disallowIdentifierNames\"><code>disallowIdentifierNames</code></a></p><p><a name=\"es6-computed-properties\"></a><a name=\"3.4\"></a></p><p><a href=\"#es6-computed-properties\">3.4</a> Use computed property names when creating objects with dynamic property names.</p><p>Why? They allow you to define all the properties of an object in one place.</p><p>```javascript</p><p>function getKey(k) {\n  return <code>a key named ${k}</code>;\n}</p><p>// bad\nconst obj = {\n  id: 5,\n  name: â€˜San Franciscoâ€™,\n};\nobj[getKey(â€˜enabledâ€™)] = true;</p><p>// good\nconst obj = {\n  id: 5,\n  name: â€˜San Franciscoâ€™,</p><p>  <a name=\"es6-object-shorthand\"></a><a name=\"3.5\"></a></p><ul>\n<li><p><a href=\"#es6-object-shorthand\">3.5</a> Use object method shorthand. eslint: <a href=\"http://eslint.org/docs/rules/object-shorthand.html\"><code>object-shorthand</code></a> jscs: <a href=\"http://jscs.info/rule/requireEnhancedObjectLiterals\"><code>requireEnhancedObjectLiterals</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> atom </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  value</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\">\n\n  addValue</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">value</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> atom</span><span class=\"pun\">.</span><span class=\"pln\">value </span><span class=\"pun\">+</span><span class=\"pln\"> value</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> atom </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  value</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\">\n\n  addValue</span><span class=\"pun\">(</span><span class=\"pln\">value</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> atom</span><span class=\"pun\">.</span><span class=\"pln\">value </span><span class=\"pun\">+</span><span class=\"pln\"> value</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n</span><span class=\"pun\">};</span></code></pre>\n<p><a name=\"es6-object-concise\"></a><a name=\"3.6\"></a></p>\n</li>\n<li><p><a href=\"#es6-object-concise\">3.6</a> Use property value shorthand. eslint: <a href=\"http://eslint.org/docs/rules/object-shorthand.html\"><code>object-shorthand</code></a> jscs: <a href=\"http://jscs.info/rule/requireEnhancedObjectLiterals\"><code>requireEnhancedObjectLiterals</code></a></p>\n<blockquote>\n<p>Why? It is shorter to write and descriptive.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> lukeSkywalker </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Luke Skywalker'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> obj </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  lukeSkywalker</span><span class=\"pun\">:</span><span class=\"pln\"> lukeSkywalker</span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> obj </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  lukeSkywalker</span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span></code></pre>\n<p><a name=\"objects--grouped-shorthand\"></a><a name=\"3.7\"></a></p>\n</li>\n<li><p><a href=\"#objects--grouped-shorthand\">3.7</a> Group your shorthand properties at the beginning of your object declaration.</p>\n<blockquote>\n<p>Why? Itâ€™s easier to tell which properties are using the shorthand.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> anakinSkywalker </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Anakin Skywalker'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> lukeSkywalker </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Luke Skywalker'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> obj </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  episodeOne</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  twoJediWalkIntoACantina</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  lukeSkywalker</span><span class=\"pun\">,</span><span class=\"pln\">\n  episodeThree</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  mayTheFourth</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">4</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  anakinSkywalker</span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> obj </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  lukeSkywalker</span><span class=\"pun\">,</span><span class=\"pln\">\n  anakinSkywalker</span><span class=\"pun\">,</span><span class=\"pln\">\n  episodeOne</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  twoJediWalkIntoACantina</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  episodeThree</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  mayTheFourth</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">4</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span></code></pre>\n<p><a name=\"objects-quoted-props\"></a><a name=\"3.8\"></a></p>\n</li>\n<li><p><a href=\"#objects-quoted-props\">3.8</a> Only quote properties that are invalid identifiers. eslint: <a href=\"http://eslint.org/docs/rules/quote-props.html\"><code>quote-props</code></a> jscs: <a href=\"http://jscs.info/rule/disallowQuotedKeysInObjects\"><code>disallowQuotedKeysInObjects</code></a></p>\n<blockquote>\n<p>Why? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> bad </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n</span><span class=\"string\"><span class=\"str\">'foo'</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"string\"><span class=\"str\">'bar'</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">4</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"string\"><span class=\"str\">'data-blah'</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">5</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> good </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\nfoo</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">,</span><span class=\"pln\">\nbar</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">4</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"string\"><span class=\"str\">'data-blah'</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">5</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span></code></pre>\n</li>\n</ul><p><a href=\"#es6-object-shorthand\">3.5</a> Use object method shorthand. eslint: <a href=\"http://eslint.org/docs/rules/object-shorthand.html\"><code>object-shorthand</code></a> jscs: <a href=\"http://jscs.info/rule/requireEnhancedObjectLiterals\"><code>requireEnhancedObjectLiterals</code></a></p><p><a name=\"es6-object-concise\"></a><a name=\"3.6\"></a></p><p><a href=\"#es6-object-concise\">3.6</a> Use property value shorthand. eslint: <a href=\"http://eslint.org/docs/rules/object-shorthand.html\"><code>object-shorthand</code></a> jscs: <a href=\"http://jscs.info/rule/requireEnhancedObjectLiterals\"><code>requireEnhancedObjectLiterals</code></a></p><p>Why? It is shorter to write and descriptive.</p><p><a name=\"objects--grouped-shorthand\"></a><a name=\"3.7\"></a></p><p><a href=\"#objects--grouped-shorthand\">3.7</a> Group your shorthand properties at the beginning of your object declaration.</p><p>Why? Itâ€™s easier to tell which properties are using the shorthand.</p><p><a name=\"objects-quoted-props\"></a><a name=\"3.8\"></a></p><p><a href=\"#objects-quoted-props\">3.8</a> Only quote properties that are invalid identifiers. eslint: <a href=\"http://eslint.org/docs/rules/quote-props.html\"><code>quote-props</code></a> jscs: <a href=\"http://jscs.info/rule/disallowQuotedKeysInObjects\"><code>disallowQuotedKeysInObjects</code></a></p><p>Why? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"OBJECTS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-arrays\">Arrays</h2><p>  <a name=\"arrays--literals\"></a><a name=\"4.1\"></a></p><ul>\n<li><p><a href=\"#arrays--literals\">4.1</a> Use the literal syntax for array creation. eslint: <a href=\"http://eslint.org/docs/rules/no-array-constructor.html\"><code>no-array-constructor</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> items </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Array</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> items </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></pre>\n<p><a name=\"arrays--push\"></a><a name=\"4.2\"></a></p>\n</li>\n<li><p><a href=\"#arrays--push\">4.2</a> Use Array#push instead of direct assignment to add items to an array.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> someStack </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\nsomeStack</span><span class=\"pun\">[</span><span class=\"pln\">someStack</span><span class=\"pun\">.</span><span class=\"pln\">length</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'abracadabra'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\nsomeStack</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'abracadabra'</span></span><span class=\"pun\">);</span></code></pre>\n<p><a name=\"es6-array-spreads\"></a><a name=\"4.3\"></a></p>\n</li>\n<li><p><a href=\"#es6-array-spreads\">4.3</a> Use array spreads <code>...</code> to copy arrays.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> len </span><span class=\"pun\">=</span><span class=\"pln\"> items</span><span class=\"pun\">.</span><span class=\"pln\">length</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> itemsCopy </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">\nlet i</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;</span><span class=\"pln\"> len</span><span class=\"pun\">;</span><span class=\"pln\"> i</span><span class=\"pun\">++)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  itemsCopy</span><span class=\"pun\">[</span><span class=\"pln\">i</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> items</span><span class=\"pun\">[</span><span class=\"pln\">i</span><span class=\"pun\">];</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> itemsCopy </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[...</span><span class=\"pln\">items</span><span class=\"pun\">];</span></code></pre>\n<p><a name=\"arrays--from\"></a><a name=\"4.4\"></a></p>\n</li>\n<li><p><a href=\"#arrays--from\">4.4</a> To convert an array-like object to an array, use Array#from.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">querySelectorAll</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.foo'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> nodes </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Array</span><span class=\"pun\">.</span><span class=\"pln\">from</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">);</span></code></pre>\n<p><a name=\"arrays--callback-return\"></a><a name=\"4.5\"></a></p>\n</li>\n<li><p><a href=\"#arrays--callback-return\">4.5</a> Use return statements in array method callbacks. Itâ€™s ok to omit the return if the function body consists of a single statement following <a href=\"#8.2\">8.2</a>. eslint: <a href=\"http://eslint.org/docs/rules/array-callback-return\"><code>array-callback-return</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">((</span><span class=\"pln\">x</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> y </span><span class=\"pun\">=</span><span class=\"pln\"> x </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> x </span><span class=\"pun\">*</span><span class=\"pln\"> y</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">x </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> x </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> flat </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">\n</span><span class=\"pun\">[[</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">],</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">],</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">4</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">5</span></span><span class=\"pun\">]].</span><span class=\"pln\">reduce</span><span class=\"pun\">((</span><span class=\"pln\">memo</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">,</span><span class=\"pln\"> index</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> flatten </span><span class=\"pun\">=</span><span class=\"pln\"> memo</span><span class=\"pun\">.</span><span class=\"pln\">concat</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">);</span><span class=\"pln\">\n  flat</span><span class=\"pun\">[</span><span class=\"pln\">index</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> memo</span><span class=\"pun\">.</span><span class=\"pln\">concat</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> flat </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">\n</span><span class=\"pun\">[[</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">],</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">],</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">4</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">5</span></span><span class=\"pun\">]].</span><span class=\"pln\">reduce</span><span class=\"pun\">((</span><span class=\"pln\">memo</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">,</span><span class=\"pln\"> index</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> flatten </span><span class=\"pun\">=</span><span class=\"pln\"> memo</span><span class=\"pun\">.</span><span class=\"pln\">concat</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">);</span><span class=\"pln\">\n  flat</span><span class=\"pun\">[</span><span class=\"pln\">index</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> flatten</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> flatten</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\ninbox</span><span class=\"pun\">.</span><span class=\"pln\">filter</span><span class=\"pun\">((</span><span class=\"pln\">msg</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> subject</span><span class=\"pun\">,</span><span class=\"pln\"> author </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> msg</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">subject </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Mockingbird'</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> author </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Harper Lee'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\ninbox</span><span class=\"pun\">.</span><span class=\"pln\">filter</span><span class=\"pun\">((</span><span class=\"pln\">msg</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> subject</span><span class=\"pun\">,</span><span class=\"pln\"> author </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> msg</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">subject </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Mockingbird'</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> author </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Harper Lee'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">});</span></code></pre>\n</li>\n</ul><p><a href=\"#arrays--literals\">4.1</a> Use the literal syntax for array creation. eslint: <a href=\"http://eslint.org/docs/rules/no-array-constructor.html\"><code>no-array-constructor</code></a></p><p><a name=\"arrays--push\"></a><a name=\"4.2\"></a></p><p><a href=\"#arrays--push\">4.2</a> Use Array#push instead of direct assignment to add items to an array.</p><p><a name=\"es6-array-spreads\"></a><a name=\"4.3\"></a></p><p><a href=\"#es6-array-spreads\">4.3</a> Use array spreads <code>...</code> to copy arrays.</p><p><a name=\"arrays--from\"></a><a name=\"4.4\"></a></p><p><a href=\"#arrays--from\">4.4</a> To convert an array-like object to an array, use Array#from.</p><p><a name=\"arrays--callback-return\"></a><a name=\"4.5\"></a></p><p><a href=\"#arrays--callback-return\">4.5</a> Use return statements in array method callbacks. Itâ€™s ok to omit the return if the function body consists of a single statement following <a href=\"#8.2\">8.2</a>. eslint: <a href=\"http://eslint.org/docs/rules/array-callback-return\"><code>array-callback-return</code></a></p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"ARRAYS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-destructuring\">Destructuring</h2><p>  <a name=\"destructuring--object\"></a><a name=\"5.1\"></a></p><ul>\n<li><p><a href=\"#destructuring--object\">5.1</a> Use object destructuring when accessing and using multiple properties of an object. jscs: <a href=\"http://jscs.info/rule/requireObjectDestructuring\"><code>requireObjectDestructuring</code></a></p>\n<blockquote>\n<p>Why? Destructuring saves you from creating temporary references for those properties.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> getFullName</span><span class=\"pun\">(</span><span class=\"pln\">user</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> firstName </span><span class=\"pun\">=</span><span class=\"pln\"> user</span><span class=\"pun\">.</span><span class=\"pln\">firstName</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> lastName </span><span class=\"pun\">=</span><span class=\"pln\"> user</span><span class=\"pun\">.</span><span class=\"pln\">lastName</span><span class=\"pun\">;</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">`</span><span class=\"pln\">$</span><span class=\"pun\">{</span><span class=\"pln\">firstName</span><span class=\"pun\">}</span><span class=\"pln\"> $</span><span class=\"pun\">{</span><span class=\"pln\">lastName</span><span class=\"pun\">}`;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> getFullName</span><span class=\"pun\">(</span><span class=\"pln\">user</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> firstName</span><span class=\"pun\">,</span><span class=\"pln\"> lastName </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> user</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">`</span><span class=\"pln\">$</span><span class=\"pun\">{</span><span class=\"pln\">firstName</span><span class=\"pun\">}</span><span class=\"pln\"> $</span><span class=\"pun\">{</span><span class=\"pln\">lastName</span><span class=\"pun\">}`;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// best</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> getFullName</span><span class=\"pun\">({</span><span class=\"pln\"> firstName</span><span class=\"pun\">,</span><span class=\"pln\"> lastName </span><span class=\"pun\">})</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">`</span><span class=\"pln\">$</span><span class=\"pun\">{</span><span class=\"pln\">firstName</span><span class=\"pun\">}</span><span class=\"pln\"> $</span><span class=\"pun\">{</span><span class=\"pln\">lastName</span><span class=\"pun\">}`;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"destructuring--array\"></a><a name=\"5.2\"></a></p>\n</li>\n<li><p><a href=\"#destructuring--array\">5.2</a> Use array destructuring. jscs: <a href=\"http://jscs.info/rule/requireArrayDestructuring\"><code>requireArrayDestructuring</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> arr </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">4</span></span><span class=\"pun\">];</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> first </span><span class=\"pun\">=</span><span class=\"pln\"> arr</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">];</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> second </span><span class=\"pun\">=</span><span class=\"pln\"> arr</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">];</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">first</span><span class=\"pun\">,</span><span class=\"pln\"> second</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> arr</span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"destructuring--object-over-array\"></a><a name=\"5.3\"></a></p>\n</li>\n<li><p><a href=\"#destructuring--object-over-array\">5.3</a> Use object destructuring for multiple return values, not array destructuring. jscs: <a href=\"http://jscs.info/rule/disallowArrayDestructuringReturn\"><code>disallowArrayDestructuringReturn</code></a></p>\n<blockquote>\n<p>Why? You can add new properties over time or change the order of things without breaking call sites.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> processInput</span><span class=\"pun\">(</span><span class=\"pln\">input</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// then a miracle occurs</span></span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">left</span><span class=\"pun\">,</span><span class=\"pln\"> right</span><span class=\"pun\">,</span><span class=\"pln\"> top</span><span class=\"pun\">,</span><span class=\"pln\"> bottom</span><span class=\"pun\">];</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// the caller needs to think about the order of return data</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">left</span><span class=\"pun\">,</span><span class=\"pln\"> __</span><span class=\"pun\">,</span><span class=\"pln\"> top</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> processInput</span><span class=\"pun\">(</span><span class=\"pln\">input</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> processInput</span><span class=\"pun\">(</span><span class=\"pln\">input</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// then a miracle occurs</span></span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> left</span><span class=\"pun\">,</span><span class=\"pln\"> right</span><span class=\"pun\">,</span><span class=\"pln\"> top</span><span class=\"pun\">,</span><span class=\"pln\"> bottom </span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// the caller selects only the data they need</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> left</span><span class=\"pun\">,</span><span class=\"pln\"> top </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> processInput</span><span class=\"pun\">(</span><span class=\"pln\">input</span><span class=\"pun\">);</span></code></pre>\n</li>\n</ul><p><a href=\"#destructuring--object\">5.1</a> Use object destructuring when accessing and using multiple properties of an object. jscs: <a href=\"http://jscs.info/rule/requireObjectDestructuring\"><code>requireObjectDestructuring</code></a></p><p>Why? Destructuring saves you from creating temporary references for those properties.</p><p><a name=\"destructuring--array\"></a><a name=\"5.2\"></a></p><p><a href=\"#destructuring--array\">5.2</a> Use array destructuring. jscs: <a href=\"http://jscs.info/rule/requireArrayDestructuring\"><code>requireArrayDestructuring</code></a></p><p><a name=\"destructuring--object-over-array\"></a><a name=\"5.3\"></a></p><p><a href=\"#destructuring--object-over-array\">5.3</a> Use object destructuring for multiple return values, not array destructuring. jscs: <a href=\"http://jscs.info/rule/disallowArrayDestructuringReturn\"><code>disallowArrayDestructuringReturn</code></a></p><p>Why? You can add new properties over time or change the order of things without breaking call sites.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"DESTRUCTURING"},{"content":"<h2 id=\"airbnb-javascript-style-guide-strings\">Strings</h2><p>  <a name=\"strings--quotes\"></a><a name=\"6.1\"></a></p><ul>\n<li><p><a href=\"#strings--quotes\">6.1</a> Use single quotes <code>''</code> for strings. eslint: <a href=\"http://eslint.org/docs/rules/quotes.html\"><code>quotes</code></a> jscs: <a href=\"http://jscs.info/rule/validateQuoteMarks\"><code>validateQuoteMarks</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> name </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">\"Capt. Janeway\"</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> name </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Capt. Janeway'</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"strings--line-length\"></a><a name=\"6.2\"></a></p>\n</li>\n<li><p><a href=\"#strings--line-length\">6.2</a> Strings that cause the line to go over 100 characters should be written across multiple lines using string concatenation.</p>\n<p><a name=\"strings--concat-perf\"></a><a name=\"6.3\"></a></p>\n</li>\n<li><p><a href=\"#strings--concat-perf\">6.3</a> Note: If overused, long strings with concatenation could impact performance. <a href=\"http://jsperf.com/ya-string-concat\">jsPerf</a> &amp; <a href=\"https://github.com/airbnb/javascript/issues/40\">Discussion</a>.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> errorMessage </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> errorMessage </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'</span><span class=\"typ\">This</span><span class=\"pln\"> is a super </span><span class=\"kwd\">long</span><span class=\"pln\"> error that was thrown because \\\nof </span><span class=\"typ\">Batman</span><span class=\"pun\">.</span><span class=\"pln\"> </span><span class=\"typ\">When</span><span class=\"pln\"> you stop to think about how </span><span class=\"typ\">Batman</span><span class=\"pln\"> had anything to </span><span class=\"kwd\">do</span><span class=\"pln\"> \\\n</span><span class=\"kwd\">with</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">,</span><span class=\"pln\"> you would </span><span class=\"kwd\">get</span><span class=\"pln\"> nowhere \\\nfast</span><span class=\"pun\">.</span><span class=\"str\">'</span></span><span class=\"str\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> errorMessage </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'This is a super long error that was thrown because '</span></span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'of Batman. When you stop to think about how Batman had anything to do '</span></span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'with this, you would get nowhere fast.'</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"es6-template-literals\"></a><a name=\"6.4\"></a></p>\n</li>\n<li><p><a href=\"#es6-template-literals\">6.4</a> When programmatically building up strings, use template strings instead of concatenation. eslint: <a href=\"http://eslint.org/docs/rules/prefer-template.html\"><code>prefer-template</code></a> <a href=\"http://eslint.org/docs/rules/template-curly-spacing\"><code>template-curly-spacing</code></a> jscs: <a href=\"http://jscs.info/rule/requireTemplateStrings\"><code>requireTemplateStrings</code></a></p>\n<blockquote>\n<p>Why? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> sayHi</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'How are you, '</span></span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> name </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'?'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> sayHi</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"string\"><span class=\"str\">'How are you, '</span></span><span class=\"pun\">,</span><span class=\"pln\"> name</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'?'</span></span><span class=\"pun\">].</span><span class=\"pln\">join</span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> sayHi</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">`</span><span class=\"typ\">How</span><span class=\"pln\"> are you</span><span class=\"pun\">,</span><span class=\"pln\"> $</span><span class=\"pun\">{</span><span class=\"pln\"> name </span><span class=\"pun\">}?`;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> sayHi</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">`</span><span class=\"typ\">How</span><span class=\"pln\"> are you</span><span class=\"pun\">,</span><span class=\"pln\"> $</span><span class=\"pun\">{</span><span class=\"pln\">name</span><span class=\"pun\">}?`;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"strings--eval\"></a><a name=\"6.5\"></a></p>\n</li>\n<li><a href=\"#strings--eval\">6.5</a> Never use <code>eval()</code> on a string, it opens too many vulnerabilities.</li>\n</ul><p><a href=\"#strings--quotes\">6.1</a> Use single quotes <code>''</code> for strings. eslint: <a href=\"http://eslint.org/docs/rules/quotes.html\"><code>quotes</code></a> jscs: <a href=\"http://jscs.info/rule/validateQuoteMarks\"><code>validateQuoteMarks</code></a></p><p><a name=\"strings--line-length\"></a><a name=\"6.2\"></a></p><p><a href=\"#strings--line-length\">6.2</a> Strings that cause the line to go over 100 characters should be written across multiple lines using string concatenation.</p><p><a name=\"strings--concat-perf\"></a><a name=\"6.3\"></a></p><p><a href=\"#strings--concat-perf\">6.3</a> Note: If overused, long strings with concatenation could impact performance. <a href=\"http://jsperf.com/ya-string-concat\">jsPerf</a> &amp; <a href=\"https://github.com/airbnb/javascript/issues/40\">Discussion</a>.</p><p><a name=\"es6-template-literals\"></a><a name=\"6.4\"></a></p><p><a href=\"#es6-template-literals\">6.4</a> When programmatically building up strings, use template strings instead of concatenation. eslint: <a href=\"http://eslint.org/docs/rules/prefer-template.html\"><code>prefer-template</code></a> <a href=\"http://eslint.org/docs/rules/template-curly-spacing\"><code>template-curly-spacing</code></a> jscs: <a href=\"http://jscs.info/rule/requireTemplateStrings\"><code>requireTemplateStrings</code></a></p><p>Why? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.</p><p><a name=\"strings--eval\"></a><a name=\"6.5\"></a></p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"STRINGS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-functions\">Functions</h2><p>  <a name=\"functions--declarations\"></a><a name=\"7.1\"></a></p><ul>\n<li><p><a href=\"#functions--declarations\">7.1</a> Use function declarations instead of function expressions. jscs: <a href=\"http://jscs.info/rule/requireFunctionDeclarations\"><code>requireFunctionDeclarations</code></a></p>\n<blockquote>\n<p>Why? Function declarations are named, so theyâ€™re easier to identify in call stacks. Also, the whole body of a function declaration is hoisted, whereas only the reference of a function expression is hoisted. This rule makes it possible to always use <a href=\"#arrow-functions\">Arrow Functions</a> in place of function expressions.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"functions--iife\"></a><a name=\"7.2\"></a></p>\n</li>\n<li><p><a href=\"#functions--iife\">7.2</a> Immediately invoked function expressions: eslint: <a href=\"http://eslint.org/docs/rules/wrap-iife.html\"><code>wrap-iife</code></a> jscs: <a href=\"http://jscs.info/rule/requireParenthesesAroundIIFE\"><code>requireParenthesesAroundIIFE</code></a></p>\n<blockquote>\n<p>Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// immediately-invoked function expression (IIFE)</span></span><span class=\"pln\">\n</span><span class=\"pun\">(</span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'Welcome to the Internet. Please follow me.'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}());</span></code></pre>\n<p><a name=\"functions--in-blocks\"></a><a name=\"7.3\"></a></p>\n</li>\n<li><p><a href=\"#functions--in-blocks\">7.3</a> Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: <a href=\"http://eslint.org/docs/rules/no-loop-func.html\"><code>no-loop-func</code></a></p>\n<p><a name=\"functions--note-on-blocks\"></a><a name=\"7.4\"></a></p>\n</li>\n<li><p><a href=\"#functions--note-on-blocks\">7.4</a> <strong>Note:</strong> ECMA-262 defines a <code>block</code> as a list of statements. A function declaration is not a statement. <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97\">Read ECMA-262â€™s note on this issue</a>.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">currentUser</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">function</span><span class=\"pln\"> test</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'Nope.'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\nlet test</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">currentUser</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  test </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'Yup.'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"functions--arguments-shadow\"></a><a name=\"7.5\"></a></p>\n</li>\n<li><p><a href=\"#functions--arguments-shadow\">7.5</a> Never name a parameter <code>arguments</code>. This will take precedence over the <code>arguments</code> object that is given to every function scope.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> nope</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">,</span><span class=\"pln\"> options</span><span class=\"pun\">,</span><span class=\"pln\"> arguments</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> yup</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">,</span><span class=\"pln\"> options</span><span class=\"pun\">,</span><span class=\"pln\"> args</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"es6-rest\"></a><a name=\"7.6\"></a></p>\n</li>\n<li><p><a href=\"#es6-rest\">7.6</a> Never use <code>arguments</code>, opt to use rest syntax <code>...</code> instead. <a href=\"http://eslint.org/docs/rules/prefer-rest-params\"><code>prefer-rest-params</code></a></p>\n<blockquote>\n<p>Why? <code>...</code> is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like <code>arguments</code>.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> concatenateAll</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> args </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Array</span><span class=\"pun\">.</span><span class=\"pln\">prototype</span><span class=\"pun\">.</span><span class=\"pln\">slice</span><span class=\"pun\">.</span><span class=\"pln\">call</span><span class=\"pun\">(</span><span class=\"pln\">arguments</span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> args</span><span class=\"pun\">.</span><span class=\"pln\">join</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">''</span></span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> concatenateAll</span><span class=\"pun\">(...</span><span class=\"pln\">args</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> args</span><span class=\"pun\">.</span><span class=\"pln\">join</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">''</span></span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"es6-default-parameters\"></a><a name=\"7.7\"></a></p>\n</li>\n<li><p><a href=\"#es6-default-parameters\">7.7</a> Use default parameter syntax rather than mutating function arguments.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// really bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> handleThings</span><span class=\"pun\">(</span><span class=\"pln\">opts</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// No! We shouldn</span><span class=\"string\"><span class=\"com\">'t mutate function arguments.</span></span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// Double bad: if opts is falsy it'</span></span><span class=\"com\">ll be set to an object which may</span></span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// be what you want but it can introduce subtle bugs.</span></span><span class=\"pln\">\n  opts </span><span class=\"pun\">=</span><span class=\"pln\"> opts </span><span class=\"pun\">||</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// still bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> handleThings</span><span class=\"pun\">(</span><span class=\"pln\">opts</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">opts </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    opts </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> handleThings</span><span class=\"pun\">(</span><span class=\"pln\">opts </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{})</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"functions--default-side-effects\"></a><a name=\"7.8\"></a></p>\n</li>\n<li><p><a href=\"#functions--default-side-effects\">7.8</a> Avoid side effects with default parameters.</p>\n<blockquote>\n<p>Why? They are confusing to reason about.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">var</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> count</span><span class=\"pun\">(</span><span class=\"pln\">a </span><span class=\"pun\">=</span><span class=\"pln\"> b</span><span class=\"pun\">++)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\ncount</span><span class=\"pun\">();</span><span class=\"pln\">  </span><span class=\"comment\"><span class=\"com\">// </span><span class=\"number\"><span class=\"com\">1</span></span></span><span class=\"pln\">\ncount</span><span class=\"pun\">();</span><span class=\"pln\">  </span><span class=\"comment\"><span class=\"com\">// </span><span class=\"number\"><span class=\"com\">2</span></span></span><span class=\"pln\">\ncount</span><span class=\"pun\">(</span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// </span><span class=\"number\"><span class=\"com\">3</span></span></span><span class=\"pln\">\ncount</span><span class=\"pun\">();</span><span class=\"pln\">  </span><span class=\"comment\"><span class=\"com\">// </span><span class=\"number\"><span class=\"com\">3</span></span></span>\n</code></pre>\n<p><a name=\"functions--defaults-last\"></a><a name=\"7.9\"></a></p>\n</li>\n<li><p><a href=\"#functions--defaults-last\">7.9</a> Always put default parameters last.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> handleThings</span><span class=\"pun\">(</span><span class=\"pln\">opts </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{},</span><span class=\"pln\"> name</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> handleThings</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">,</span><span class=\"pln\"> opts </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{})</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"functions--constructor\"></a><a name=\"7.10\"></a></p>\n</li>\n<li><p><a href=\"#functions--constructor\">7.10</a> Never use the Function constructor to create a new function.</p>\n<blockquote>\n<p>Why? Creating a function in this way evaluates a string similarly to eval(), which opens vulnerabilities.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">var</span><span class=\"pln\"> add </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Function</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'a'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'b'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'return a + b'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// still bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">var</span><span class=\"pln\"> subtract </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Function</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'a'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'b'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'return a - b'</span></span><span class=\"pun\">);</span></code></pre>\n<p><a name=\"functions--signature-spacing\"></a><a name=\"7.11\"></a></p>\n</li>\n<li><p><a href=\"#functions--signature-spacing\">7.11</a> Spacing in a function signature.</p>\n<blockquote>\n<p>Why? Consistency is good, and you shouldnâ€™t have to add or remove a space when adding or removing a name.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> f </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pun\">(){};</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> g </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(){};</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> h </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> x </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> y </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> a</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{};</span></code></pre>\n<p><a name=\"functions--mutate-params\"></a><a name=\"7.12\"></a></p>\n</li>\n<li><p><a href=\"#functions--mutate-params\">7.12</a> Never mutate parameters. eslint: <a href=\"http://eslint.org/docs/rules/no-param-reassign.html\"><code>no-param-reassign</code></a></p>\n<blockquote>\n<p>Why? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> f</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pun\">(</span><span class=\"pln\">obj</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  obj</span><span class=\"pun\">.</span><span class=\"pln\">key </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> f</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pun\">(</span><span class=\"pln\">obj</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> key </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Object</span><span class=\"pun\">.</span><span class=\"pln\">prototype</span><span class=\"pun\">.</span><span class=\"pln\">hasOwnProperty</span><span class=\"pun\">.</span><span class=\"pln\">call</span><span class=\"pun\">(</span><span class=\"pln\">obj</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'key'</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">?</span><span class=\"pln\"> obj</span><span class=\"pun\">.</span><span class=\"pln\">key </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span></code></pre>\n<p><a name=\"functions--reassign-params\"></a><a name=\"7.13\"></a></p>\n</li>\n<li><p><a href=\"#functions--reassign-params\">7.13</a> Never reassign parameters. eslint: <a href=\"http://eslint.org/docs/rules/no-param-reassign.html\"><code>no-param-reassign</code></a></p>\n<blockquote>\n<p>Why? Reassigning parameters can lead to unexpected behavior, especially when accessing the <code>arguments</code> object. It can also cause optimization issues, especially in V8.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> f</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"kwd\">function</span><span class=\"pln\"> f</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(!</span><span class=\"pln\">a</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> f</span><span class=\"number\"><span class=\"pln\">3</span></span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">||</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"kwd\">function</span><span class=\"pln\"> f</span><span class=\"number\"><span class=\"pln\">4</span></span><span class=\"pun\">(</span><span class=\"pln\">a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n</li>\n</ul><p><a href=\"#functions--declarations\">7.1</a> Use function declarations instead of function expressions. jscs: <a href=\"http://jscs.info/rule/requireFunctionDeclarations\"><code>requireFunctionDeclarations</code></a></p><p>Why? Function declarations are named, so theyâ€™re easier to identify in call stacks. Also, the whole body of a function declaration is hoisted, whereas only the reference of a function expression is hoisted. This rule makes it possible to always use <a href=\"#arrow-functions\">Arrow Functions</a> in place of function expressions.</p><p><a name=\"functions--iife\"></a><a name=\"7.2\"></a></p><p><a href=\"#functions--iife\">7.2</a> Immediately invoked function expressions: eslint: <a href=\"http://eslint.org/docs/rules/wrap-iife.html\"><code>wrap-iife</code></a> jscs: <a href=\"http://jscs.info/rule/requireParenthesesAroundIIFE\"><code>requireParenthesesAroundIIFE</code></a></p><p>Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.</p><p><a name=\"functions--in-blocks\"></a><a name=\"7.3\"></a></p><p><a href=\"#functions--in-blocks\">7.3</a> Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: <a href=\"http://eslint.org/docs/rules/no-loop-func.html\"><code>no-loop-func</code></a></p><p><a name=\"functions--note-on-blocks\"></a><a name=\"7.4\"></a></p><p><a href=\"#functions--note-on-blocks\">7.4</a> <strong>Note:</strong> ECMA-262 defines a <code>block</code> as a list of statements. A function declaration is not a statement. <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97\">Read ECMA-262â€™s note on this issue</a>.</p><p><a name=\"functions--arguments-shadow\"></a><a name=\"7.5\"></a></p><p><a href=\"#functions--arguments-shadow\">7.5</a> Never name a parameter <code>arguments</code>. This will take precedence over the <code>arguments</code> object that is given to every function scope.</p><p><a name=\"es6-rest\"></a><a name=\"7.6\"></a></p><p><a href=\"#es6-rest\">7.6</a> Never use <code>arguments</code>, opt to use rest syntax <code>...</code> instead. <a href=\"http://eslint.org/docs/rules/prefer-rest-params\"><code>prefer-rest-params</code></a></p><p>Why? <code>...</code> is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like <code>arguments</code>.</p><p><a name=\"es6-default-parameters\"></a><a name=\"7.7\"></a></p><p><a href=\"#es6-default-parameters\">7.7</a> Use default parameter syntax rather than mutating function arguments.</p><p><a name=\"functions--default-side-effects\"></a><a name=\"7.8\"></a></p><p><a href=\"#functions--default-side-effects\">7.8</a> Avoid side effects with default parameters.</p><p>Why? They are confusing to reason about.</p><p><a name=\"functions--defaults-last\"></a><a name=\"7.9\"></a></p><p><a href=\"#functions--defaults-last\">7.9</a> Always put default parameters last.</p><p><a name=\"functions--constructor\"></a><a name=\"7.10\"></a></p><p><a href=\"#functions--constructor\">7.10</a> Never use the Function constructor to create a new function.</p><p>Why? Creating a function in this way evaluates a string similarly to eval(), which opens vulnerabilities.</p><p><a name=\"functions--signature-spacing\"></a><a name=\"7.11\"></a></p><p><a href=\"#functions--signature-spacing\">7.11</a> Spacing in a function signature.</p><p>Why? Consistency is good, and you shouldnâ€™t have to add or remove a space when adding or removing a name.</p><p><a name=\"functions--mutate-params\"></a><a name=\"7.12\"></a></p><p><a href=\"#functions--mutate-params\">7.12</a> Never mutate parameters. eslint: <a href=\"http://eslint.org/docs/rules/no-param-reassign.html\"><code>no-param-reassign</code></a></p><p>Why? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.</p><p><a name=\"functions--reassign-params\"></a><a name=\"7.13\"></a></p><p><a href=\"#functions--reassign-params\">7.13</a> Never reassign parameters. eslint: <a href=\"http://eslint.org/docs/rules/no-param-reassign.html\"><code>no-param-reassign</code></a></p><p>Why? Reassigning parameters can lead to unexpected behavior, especially when accessing the <code>arguments</code> object. It can also cause optimization issues, especially in V8.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"FUNCTIONS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-arrow-functions\">Arrow Functions</h2><p>  <a name=\"arrows--use-them\"></a><a name=\"8.1\"></a></p><ul>\n<li><p><a href=\"#arrows--use-them\">8.1</a> When you must use function expressions (as when passing an anonymous function), use arrow function notation. eslint: <a href=\"http://eslint.org/docs/rules/prefer-arrow-callback.html\"><code>prefer-arrow-callback</code></a>, <a href=\"http://eslint.org/docs/rules/arrow-spacing.html\"><code>arrow-spacing</code></a> jscs: <a href=\"http://jscs.info/rule/requireArrowFunctions\"><code>requireArrowFunctions</code></a></p>\n<blockquote>\n<p>Why? It creates a version of the function that executes in the context of <code>this</code>, which is usually what you want, and is a more concise syntax.</p>\n<p>Why not? If you have a fairly complicated function, you might move that logic out into its own function declaration.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> y </span><span class=\"pun\">=</span><span class=\"pln\"> x </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> x </span><span class=\"pun\">*</span><span class=\"pln\"> y</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">((</span><span class=\"pln\">x</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> y </span><span class=\"pun\">=</span><span class=\"pln\"> x </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> x </span><span class=\"pun\">*</span><span class=\"pln\"> y</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">});</span></code></pre>\n<p><a name=\"arrows--implicit-return\"></a><a name=\"8.2\"></a></p>\n</li>\n<li><p><a href=\"#arrows--implicit-return\">8.2</a> If the function body consists of a single expression, omit the braces and use the implicit return. Otherwise, keep the braces and use a <code>return</code> statement. eslint: <a href=\"http://eslint.org/docs/rules/arrow-parens.html\"><code>arrow-parens</code></a>, <a href=\"http://eslint.org/docs/rules/arrow-body-style.html\"><code>arrow-body-style</code></a> jscs:  <a href=\"http://jscs.info/rule/disallowParenthesesAroundArrowParam\"><code>disallowParenthesesAroundArrowParam</code></a>, <a href=\"http://jscs.info/rule/requireShorthandArrowFunctions\"><code>requireShorthandArrowFunctions</code></a></p>\n<blockquote>\n<p>Why? Syntactic sugar. It reads well when multiple functions are chained together.</p>\n<p>Why not? If you plan on returning an object.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">number </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> nextNumber </span><span class=\"pun\">=</span><span class=\"pln\"> number </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">`</span><span class=\"pln\">A string containing the $</span><span class=\"pun\">{</span><span class=\"pln\">nextNumber</span><span class=\"pun\">}.`;</span><span class=\"pln\">\n</span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">number </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">`</span><span class=\"pln\">A string containing the $</span><span class=\"pun\">{</span><span class=\"pln\">number</span><span class=\"pun\">}.`);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">((</span><span class=\"pln\">number</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> nextNumber </span><span class=\"pun\">=</span><span class=\"pln\"> number </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">`</span><span class=\"pln\">A string containing the $</span><span class=\"pun\">{</span><span class=\"pln\">nextNumber</span><span class=\"pun\">}.`;</span><span class=\"pln\">\n</span><span class=\"pun\">});</span></code></pre>\n<p><a name=\"arrows--paren-wrap\"></a><a name=\"8.3\"></a></p>\n</li>\n<li><p><a href=\"#arrows--paren-wrap\">8.3</a> In case the expression spans over multiple lines, wrap it in parentheses for better readability.</p>\n<blockquote>\n<p>Why? It shows clearly where the function starts and ends.</p>\n</blockquote>\n<pre><code class=\"lang-js prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">number </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'As time went by, the string containing the '</span></span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\">\n  </span><span class=\"pun\">`</span><span class=\"pln\">$</span><span class=\"pun\">{</span><span class=\"pln\">number</span><span class=\"pun\">}</span><span class=\"pln\"> became much longer</span><span class=\"pun\">.</span><span class=\"pln\"> </span><span class=\"typ\">So</span><span class=\"pln\"> we needed to </span><span class=\"kwd\">break</span><span class=\"pln\"> it over multiple </span><span class=\"pun\">`</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'lines.'</span></span><span class=\"pln\">\n</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">number </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">\n  </span><span class=\"pun\">`</span><span class=\"typ\">As</span><span class=\"pln\"> time went by</span><span class=\"pun\">,</span><span class=\"pln\"> the string containing the $</span><span class=\"pun\">{</span><span class=\"pln\">number</span><span class=\"pun\">}</span><span class=\"pln\"> became much </span><span class=\"pun\">`</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'longer. So we needed to break it over multiple lines.'</span></span><span class=\"pln\">\n</span><span class=\"pun\">));</span></code></pre>\n<p><a name=\"arrows--one-arg-parens\"></a><a name=\"8.4\"></a></p>\n</li>\n<li><p><a href=\"#arrows--one-arg-parens\">8.4</a> If your function takes a single argument and doesnâ€™t use braces, omit the parentheses. Otherwise, always include parentheses around arguments. eslint: <a href=\"http://eslint.org/docs/rules/arrow-parens.html\"><code>arrow-parens</code></a> jscs:  <a href=\"http://jscs.info/rule/disallowParenthesesAroundArrowParam\"><code>disallowParenthesesAroundArrowParam</code></a></p>\n<blockquote>\n<p>Why? Less visual clutter.</p>\n</blockquote>\n<pre><code class=\"lang-js prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">((</span><span class=\"pln\">x</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> x </span><span class=\"pun\">*</span><span class=\"pln\"> x</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">x </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> x </span><span class=\"pun\">*</span><span class=\"pln\"> x</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">number </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">\n  </span><span class=\"pun\">`</span><span class=\"pln\">A </span><span class=\"kwd\">long</span><span class=\"pln\"> string </span><span class=\"kwd\">with</span><span class=\"pln\"> the $</span><span class=\"pun\">{</span><span class=\"pln\">number</span><span class=\"pun\">}.</span><span class=\"pln\"> </span><span class=\"typ\">It</span><span class=\"pun\">â€™</span><span class=\"pln\">s so </span><span class=\"kwd\">long</span><span class=\"pln\"> that we</span><span class=\"pun\">â€™</span><span class=\"pln\">ve broken it </span><span class=\"pun\">`</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'over multiple lines!'</span></span><span class=\"pln\">\n</span><span class=\"pun\">));</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">x </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> y </span><span class=\"pun\">=</span><span class=\"pln\"> x </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> x </span><span class=\"pun\">*</span><span class=\"pln\"> y</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">].</span><span class=\"pln\">map</span><span class=\"pun\">((</span><span class=\"pln\">x</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> y </span><span class=\"pun\">=</span><span class=\"pln\"> x </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> x </span><span class=\"pun\">*</span><span class=\"pln\"> y</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">});</span></code></pre>\n<p><a name=\"arrows--confusing\"></a><a name=\"8.5\"></a></p>\n</li>\n<li><p><a href=\"#arrows--confusing\">8.5</a> Avoid confusing arrow function syntax (<code>=&gt;</code>) with comparison operators (<code>&lt;=</code>, <code>&gt;=</code>). eslint: <a href=\"http://eslint.org/docs/rules/no-confusing-arrow\"><code>no-confusing-arrow</code></a></p>\n<pre><code class=\"lang-js prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> itemHeight </span><span class=\"pun\">=</span><span class=\"pln\"> item </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> item</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">256</span></span><span class=\"pln\"> </span><span class=\"pun\">?</span><span class=\"pln\"> item</span><span class=\"pun\">.</span><span class=\"pln\">largeSize </span><span class=\"pun\">:</span><span class=\"pln\"> item</span><span class=\"pun\">.</span><span class=\"pln\">smallSize</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> itemHeight </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> item</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">256</span></span><span class=\"pln\"> </span><span class=\"pun\">?</span><span class=\"pln\"> item</span><span class=\"pun\">.</span><span class=\"pln\">largeSize </span><span class=\"pun\">:</span><span class=\"pln\"> item</span><span class=\"pun\">.</span><span class=\"pln\">smallSize</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> itemHeight </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"kwd\">return</span><span class=\"pln\"> item</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">256</span></span><span class=\"pln\"> </span><span class=\"pun\">?</span><span class=\"pln\"> item</span><span class=\"pun\">.</span><span class=\"pln\">largeSize </span><span class=\"pun\">:</span><span class=\"pln\"> item</span><span class=\"pun\">.</span><span class=\"pln\">smallSize</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"pun\">}</span></code></pre>\n</li>\n</ul><p><a href=\"#arrows--use-them\">8.1</a> When you must use function expressions (as when passing an anonymous function), use arrow function notation. eslint: <a href=\"http://eslint.org/docs/rules/prefer-arrow-callback.html\"><code>prefer-arrow-callback</code></a>, <a href=\"http://eslint.org/docs/rules/arrow-spacing.html\"><code>arrow-spacing</code></a> jscs: <a href=\"http://jscs.info/rule/requireArrowFunctions\"><code>requireArrowFunctions</code></a></p><p>Why? It creates a version of the function that executes in the context of <code>this</code>, which is usually what you want, and is a more concise syntax.</p><p>Why not? If you have a fairly complicated function, you might move that logic out into its own function declaration.</p><p><a name=\"arrows--implicit-return\"></a><a name=\"8.2\"></a></p><p><a href=\"#arrows--implicit-return\">8.2</a> If the function body consists of a single expression, omit the braces and use the implicit return. Otherwise, keep the braces and use a <code>return</code> statement. eslint: <a href=\"http://eslint.org/docs/rules/arrow-parens.html\"><code>arrow-parens</code></a>, <a href=\"http://eslint.org/docs/rules/arrow-body-style.html\"><code>arrow-body-style</code></a> jscs:  <a href=\"http://jscs.info/rule/disallowParenthesesAroundArrowParam\"><code>disallowParenthesesAroundArrowParam</code></a>, <a href=\"http://jscs.info/rule/requireShorthandArrowFunctions\"><code>requireShorthandArrowFunctions</code></a></p><p>Why? Syntactic sugar. It reads well when multiple functions are chained together.</p><p>Why not? If you plan on returning an object.</p><p><a name=\"arrows--paren-wrap\"></a><a name=\"8.3\"></a></p><p><a href=\"#arrows--paren-wrap\">8.3</a> In case the expression spans over multiple lines, wrap it in parentheses for better readability.</p><p>Why? It shows clearly where the function starts and ends.</p><p><a name=\"arrows--one-arg-parens\"></a><a name=\"8.4\"></a></p><p><a href=\"#arrows--one-arg-parens\">8.4</a> If your function takes a single argument and doesnâ€™t use braces, omit the parentheses. Otherwise, always include parentheses around arguments. eslint: <a href=\"http://eslint.org/docs/rules/arrow-parens.html\"><code>arrow-parens</code></a> jscs:  <a href=\"http://jscs.info/rule/disallowParenthesesAroundArrowParam\"><code>disallowParenthesesAroundArrowParam</code></a></p><p>Why? Less visual clutter.</p><p><a name=\"arrows--confusing\"></a><a name=\"8.5\"></a></p><p><a href=\"#arrows--confusing\">8.5</a> Avoid confusing arrow function syntax (<code>=&gt;</code>) with comparison operators (<code>&lt;=</code>, <code>&gt;=</code>). eslint: <a href=\"http://eslint.org/docs/rules/no-confusing-arrow\"><code>no-confusing-arrow</code></a></p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"ARROW FUNCTIONS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-constructors\">Constructors</h2><p>  <a name=\"constructors--use-class\"></a><a name=\"9.1\"></a></p><ul>\n<li><p><a href=\"#constructors--use-class\">9.1</a> Always use <code>class</code>. Avoid manipulating <code>prototype</code> directly.</p>\n<blockquote>\n<p>Why? <code>class</code> syntax is more concise and easier to reason about.</p>\n</blockquote>\n<p>```javascript\n// bad\nfunction Queue(contents = []) {\n  this.queue = [â€¦contents];\n}\nQueue.prototype.pop = function () {\n  const value = this.queue[0];\n  this.queue.splice(0, 1);\n  return value;\n};</p>\n</li>\n</ul><p><a href=\"#constructors--use-class\">9.1</a> Always use <code>class</code>. Avoid manipulating <code>prototype</code> directly.</p><p>Why? <code>class</code> syntax is more concise and easier to reason about.</p><p>```javascript\n// bad\nfunction Queue(contents = []) {\n  this.queue = [â€¦contents];\n}\nQueue.prototype.pop = function () {\n  const value = this.queue[0];\n  this.queue.splice(0, 1);\n  return value;\n};</p><p>  <a name=\"constructors--extends\"></a><a name=\"9.2\"></a></p><ul>\n<li><p><a href=\"#constructors--extends\">9.2</a> Use <code>extends</code> for inheritance.</p>\n<blockquote>\n<p>Why? It is a built-in way to inherit prototype functionality without breaking <code>instanceof</code>.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> inherits </span><span class=\"pun\">=</span><span class=\"pln\"> require</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'inherits'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"typ\">PeekableQueue</span><span class=\"pun\">(</span><span class=\"pln\">contents</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"typ\">Queue</span><span class=\"pun\">.</span><span class=\"pln\">apply</span><span class=\"pun\">(</span><span class=\"kwd\">this</span><span class=\"pun\">,</span><span class=\"pln\"> contents</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\ninherits</span><span class=\"pun\">(</span><span class=\"typ\">PeekableQueue</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"typ\">Queue</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"typ\">PeekableQueue</span><span class=\"pun\">.</span><span class=\"pln\">prototype</span><span class=\"pun\">.</span><span class=\"pln\">peek </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">_queue</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">];</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">PeekableQueue</span><span class=\"pln\"> extends </span><span class=\"typ\">Queue</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  peek</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">_queue</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">];</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"constructors--chaining\"></a><a name=\"9.3\"></a></p>\n</li>\n<li><p><a href=\"#constructors--chaining\">9.3</a> Methods can return <code>this</code> to help with method chaining.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"typ\">Jedi</span><span class=\"pun\">.</span><span class=\"pln\">prototype</span><span class=\"pun\">.</span><span class=\"pln\">jump </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">jumping </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"typ\">Jedi</span><span class=\"pun\">.</span><span class=\"pln\">prototype</span><span class=\"pun\">.</span><span class=\"pln\">setHeight </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">height</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">=</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">const</span><span class=\"pln\"> luke </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Jedi</span><span class=\"pun\">();</span><span class=\"pln\">\nluke</span><span class=\"pun\">.</span><span class=\"pln\">jump</span><span class=\"pun\">();</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; true</span></span><span class=\"pln\">\nluke</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"number\"><span class=\"lit\">20</span></span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; undefined</span></span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Jedi</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  jump</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">jumping </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  setHeight</span><span class=\"pun\">(</span><span class=\"pln\">height</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">=</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"kwd\">const</span><span class=\"pln\"> luke </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Jedi</span><span class=\"pun\">();</span><span class=\"pln\">\n\nluke</span><span class=\"pun\">.</span><span class=\"pln\">jump</span><span class=\"pun\">()</span><span class=\"pln\">\n  </span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"number\"><span class=\"lit\">20</span></span><span class=\"pun\">);</span></code></pre>\n</li>\n</ul><p><a href=\"#constructors--extends\">9.2</a> Use <code>extends</code> for inheritance.</p><p>Why? It is a built-in way to inherit prototype functionality without breaking <code>instanceof</code>.</p><p><a name=\"constructors--chaining\"></a><a name=\"9.3\"></a></p><p><a href=\"#constructors--chaining\">9.3</a> Methods can return <code>this</code> to help with method chaining.</p><p>  <a name=\"constructors--tostring\"></a><a name=\"9.4\"></a></p><ul>\n<li><p><a href=\"#constructors--tostring\">9.4</a> Itâ€™s okay to write a custom toString() method, just make sure it works successfully and causes no side effects.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Jedi</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  constructor</span><span class=\"pun\">(</span><span class=\"pln\">options </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{})</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">name </span><span class=\"pun\">=</span><span class=\"pln\"> options</span><span class=\"pun\">.</span><span class=\"pln\">name </span><span class=\"pun\">||</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'no name'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  getName</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">name</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  toString</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">`</span><span class=\"typ\">Jedi</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\"> $</span><span class=\"pun\">{</span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">getName</span><span class=\"pun\">()}`;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"constructors--no-useless\"></a><a name=\"9.5\"></a></p>\n</li>\n<li><p><a href=\"#constructors--no-useless\">9.5</a> Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. <a href=\"http://eslint.org/docs/rules/no-useless-constructor\"><code>no-useless-constructor</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Jedi</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  constructor</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{}</span><span class=\"pln\">\n\n  getName</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">name</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rey</span><span class=\"pln\"> extends </span><span class=\"typ\">Jedi</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  constructor</span><span class=\"pun\">(...</span><span class=\"pln\">args</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    super</span><span class=\"pun\">(...</span><span class=\"pln\">args</span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rey</span><span class=\"pln\"> extends </span><span class=\"typ\">Jedi</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  constructor</span><span class=\"pun\">(...</span><span class=\"pln\">args</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    super</span><span class=\"pun\">(...</span><span class=\"pln\">args</span><span class=\"pun\">);</span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">name </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Rey'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n</li>\n</ul><p><a href=\"#constructors--tostring\">9.4</a> Itâ€™s okay to write a custom toString() method, just make sure it works successfully and causes no side effects.</p><p><a name=\"constructors--no-useless\"></a><a name=\"9.5\"></a></p><p><a href=\"#constructors--no-useless\">9.5</a> Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. <a href=\"http://eslint.org/docs/rules/no-useless-constructor\"><code>no-useless-constructor</code></a></p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"CONSTRUCTORS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-modules\">Modules</h2><p>  <a name=\"modules--use-them\"></a><a name=\"10.1\"></a></p><ul>\n<li><p><a href=\"#modules--use-them\">10.1</a> Always use modules (<code>import</code>/<code>export</code>) over a non-standard module system. You can always transpile to your preferred module system.</p>\n<blockquote>\n<p>Why? Modules are the future, letâ€™s start using the future now.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">AirbnbStyleGuide</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> require</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'./AirbnbStyleGuide'</span></span><span class=\"pun\">);</span><span class=\"pln\">\nmodule</span><span class=\"pun\">.</span><span class=\"pln\">exports </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">AirbnbStyleGuide</span><span class=\"pun\">.</span><span class=\"pln\">es</span><span class=\"number\"><span class=\"pln\">6</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// ok</span></span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"typ\">AirbnbStyleGuide</span><span class=\"pln\"> from </span><span class=\"string\"><span class=\"str\">'./AirbnbStyleGuide'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">export</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"typ\">AirbnbStyleGuide</span><span class=\"pun\">.</span><span class=\"pln\">es</span><span class=\"number\"><span class=\"pln\">6</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// best</span></span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> es</span><span class=\"number\"><span class=\"pln\">6</span></span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\"> from </span><span class=\"string\"><span class=\"str\">'./AirbnbStyleGuide'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">export</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> es</span><span class=\"number\"><span class=\"pln\">6</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"modules--no-wildcard\"></a><a name=\"10.2\"></a></p>\n</li>\n<li><p><a href=\"#modules--no-wildcard\">10.2</a> Do not use wildcard imports.</p>\n<blockquote>\n<p>Why? This makes sure you have a single default export.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\"> as </span><span class=\"typ\">AirbnbStyleGuide</span><span class=\"pln\"> from </span><span class=\"string\"><span class=\"str\">'./AirbnbStyleGuide'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"typ\">AirbnbStyleGuide</span><span class=\"pln\"> from </span><span class=\"string\"><span class=\"str\">'./AirbnbStyleGuide'</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"modules--no-export-from-import\"></a><a name=\"10.3\"></a></p>\n</li>\n<li><p><a href=\"#modules--no-export-from-import\">10.3</a> And do not export directly from an import.</p>\n<blockquote>\n<p>Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// filename es</span><span class=\"number\"><span class=\"com\">6</span></span><span class=\"com\">.js</span></span><span class=\"pln\">\n</span><span class=\"kwd\">export</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> es</span><span class=\"number\"><span class=\"pln\">6</span></span><span class=\"pln\"> as </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\"> from </span><span class=\"string\"><span class=\"str\">'./airbnbStyleGuide'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// filename es</span><span class=\"number\"><span class=\"com\">6</span></span><span class=\"com\">.js</span></span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> es</span><span class=\"number\"><span class=\"pln\">6</span></span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\"> from </span><span class=\"string\"><span class=\"str\">'./AirbnbStyleGuide'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">export</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> es</span><span class=\"number\"><span class=\"pln\">6</span></span><span class=\"pun\">;</span></code></pre>\n</li>\n</ul><p><a href=\"#modules--use-them\">10.1</a> Always use modules (<code>import</code>/<code>export</code>) over a non-standard module system. You can always transpile to your preferred module system.</p><p>Why? Modules are the future, letâ€™s start using the future now.</p><p><a name=\"modules--no-wildcard\"></a><a name=\"10.2\"></a></p><p><a href=\"#modules--no-wildcard\">10.2</a> Do not use wildcard imports.</p><p>Why? This makes sure you have a single default export.</p><p><a name=\"modules--no-export-from-import\"></a><a name=\"10.3\"></a></p><p><a href=\"#modules--no-export-from-import\">10.3</a> And do not export directly from an import.</p><p>Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"MODULES"},{"content":"<h2 id=\"airbnb-javascript-style-guide-iterators-and-generators\">Iterators and Generators</h2><p>  <a name=\"iterators--nope\"></a><a name=\"11.1\"></a></p><ul>\n<li><p><a href=\"#iterators--nope\">11.1</a> Donâ€™t use iterators. Prefer JavaScriptâ€™s higher-order functions like <code>map()</code> and <code>reduce()</code> instead of loops like <code>for-of</code>. eslint: <a href=\"http://eslint.org/docs/rules/no-iterator.html\"><code>no-iterator</code></a></p>\n<blockquote>\n<p>Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> numbers </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">4</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">5</span></span><span class=\"pun\">];</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\nlet sum </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">let num of numbers</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  sum </span><span class=\"pun\">+=</span><span class=\"pln\"> num</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\nsum </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">15</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\nlet sum </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">;</span><span class=\"pln\">\nnumbers</span><span class=\"pun\">.</span><span class=\"pln\">forEach</span><span class=\"pun\">(</span><span class=\"pln\">num </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> sum </span><span class=\"pun\">+=</span><span class=\"pln\"> num</span><span class=\"pun\">);</span><span class=\"pln\">\nsum </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">15</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// best (use the functional force)</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> sum </span><span class=\"pun\">=</span><span class=\"pln\"> numbers</span><span class=\"pun\">.</span><span class=\"pln\">reduce</span><span class=\"pun\">((</span><span class=\"pln\">total</span><span class=\"pun\">,</span><span class=\"pln\"> num</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> total </span><span class=\"pun\">+</span><span class=\"pln\"> num</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">);</span><span class=\"pln\">\nsum </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">15</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"generators--nope\"></a><a name=\"11.2\"></a></p>\n</li>\n<li><p><a href=\"#generators--nope\">11.2</a> Donâ€™t use generators for now.</p>\n<blockquote>\n<p>Why? They donâ€™t transpile well to ES5.</p>\n</blockquote>\n</li>\n</ul><p><a href=\"#iterators--nope\">11.1</a> Donâ€™t use iterators. Prefer JavaScriptâ€™s higher-order functions like <code>map()</code> and <code>reduce()</code> instead of loops like <code>for-of</code>. eslint: <a href=\"http://eslint.org/docs/rules/no-iterator.html\"><code>no-iterator</code></a></p><p>Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.</p><p><a name=\"generators--nope\"></a><a name=\"11.2\"></a></p><p><a href=\"#generators--nope\">11.2</a> Donâ€™t use generators for now.</p><p>Why? They donâ€™t transpile well to ES5.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"ITERATORS AND GENERATORS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-properties\">Properties</h2><p>  <a name=\"properties--dot\"></a><a name=\"12.1\"></a></p><ul>\n<li><p><a href=\"#properties--dot\">12.1</a> Use dot notation when accessing properties. eslint: <a href=\"http://eslint.org/docs/rules/dot-notation.html\"><code>dot-notation</code></a> jscs: <a href=\"http://jscs.info/rule/requireDotNotation\"><code>requireDotNotation</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> luke </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  jedi</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">,</span><span class=\"pln\">\n  age</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">28</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> isJedi </span><span class=\"pun\">=</span><span class=\"pln\"> luke</span><span class=\"pun\">[</span><span class=\"string\"><span class=\"str\">'jedi'</span></span><span class=\"pun\">];</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> isJedi </span><span class=\"pun\">=</span><span class=\"pln\"> luke</span><span class=\"pun\">.</span><span class=\"pln\">jedi</span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"properties--bracket\"></a><a name=\"12.2\"></a></p>\n</li>\n<li><p><a href=\"#properties--bracket\">12.2</a> Use bracket notation <code>[]</code> when accessing properties with a variable.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> luke </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  jedi</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">,</span><span class=\"pln\">\n  age</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">28</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">function</span><span class=\"pln\"> getProp</span><span class=\"pun\">(</span><span class=\"pln\">prop</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> luke</span><span class=\"pun\">[</span><span class=\"pln\">prop</span><span class=\"pun\">];</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"kwd\">const</span><span class=\"pln\"> isJedi </span><span class=\"pun\">=</span><span class=\"pln\"> getProp</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'jedi'</span></span><span class=\"pun\">);</span></code></pre>\n</li>\n</ul><p><a href=\"#properties--dot\">12.1</a> Use dot notation when accessing properties. eslint: <a href=\"http://eslint.org/docs/rules/dot-notation.html\"><code>dot-notation</code></a> jscs: <a href=\"http://jscs.info/rule/requireDotNotation\"><code>requireDotNotation</code></a></p><p><a name=\"properties--bracket\"></a><a name=\"12.2\"></a></p><p><a href=\"#properties--bracket\">12.2</a> Use bracket notation <code>[]</code> when accessing properties with a variable.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"PROPERTIES"},{"content":"<h2 id=\"airbnb-javascript-style-guide-variables\">Variables</h2><p>  <a name=\"variables--const\"></a><a name=\"13.1\"></a></p><ul>\n<li><p><a href=\"#variables--const\">13.1</a> Always use <code>const</code> to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\nsuperPower </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">SuperPower</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> superPower </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">SuperPower</span><span class=\"pun\">();</span></code></pre>\n<p><a name=\"variables--one-const\"></a><a name=\"13.2\"></a></p>\n</li>\n<li><p><a href=\"#variables--one-const\">13.2</a> Use one <code>const</code> declaration per variable. eslint: <a href=\"http://eslint.org/docs/rules/one-var.html\"><code>one-var</code></a> jscs: <a href=\"http://jscs.info/rule/disallowMultipleVarDecl\"><code>disallowMultipleVarDecl</code></a></p>\n<blockquote>\n<p>Why? Itâ€™s easier to add new variable declarations this way, and you never have to worry about swapping out a <code>;</code> for a <code>,</code> or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> items </span><span class=\"pun\">=</span><span class=\"pln\"> getItems</span><span class=\"pun\">(),</span><span class=\"pln\">\n    goSportsTeam </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">,</span><span class=\"pln\">\n    dragonball </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'z'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// (compare to above, and try to spot the mistake)</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> items </span><span class=\"pun\">=</span><span class=\"pln\"> getItems</span><span class=\"pun\">(),</span><span class=\"pln\">\n    goSportsTeam </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n    dragonball </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'z'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> items </span><span class=\"pun\">=</span><span class=\"pln\"> getItems</span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> goSportsTeam </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> dragonball </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'z'</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"variables--const-let-group\"></a><a name=\"13.3\"></a></p>\n</li>\n<li><p><a href=\"#variables--const-let-group\">13.3</a> Group all your <code>const</code>s and then group all your <code>let</code>s.</p>\n<blockquote>\n<p>Why? This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\nlet i</span><span class=\"pun\">,</span><span class=\"pln\"> len</span><span class=\"pun\">,</span><span class=\"pln\"> dragonball</span><span class=\"pun\">,</span><span class=\"pln\">\n    items </span><span class=\"pun\">=</span><span class=\"pln\"> getItems</span><span class=\"pun\">(),</span><span class=\"pln\">\n    goSportsTeam </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\nlet i</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> items </span><span class=\"pun\">=</span><span class=\"pln\"> getItems</span><span class=\"pun\">();</span><span class=\"pln\">\nlet dragonball</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> goSportsTeam </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\nlet len</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> goSportsTeam </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> items </span><span class=\"pun\">=</span><span class=\"pln\"> getItems</span><span class=\"pun\">();</span><span class=\"pln\">\nlet dragonball</span><span class=\"pun\">;</span><span class=\"pln\">\nlet i</span><span class=\"pun\">;</span><span class=\"pln\">\nlet length</span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"variables--define-where-used\"></a><a name=\"13.4\"></a></p>\n</li>\n<li><p><a href=\"#variables--define-where-used\">13.4</a> Assign variables where you need them, but place them in a reasonable place.</p>\n<blockquote>\n<p>Why? <code>let</code> and <code>const</code> are block scoped and not function scoped.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad - unnecessary function call</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> checkName</span><span class=\"pun\">(</span><span class=\"pln\">hasName</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> name </span><span class=\"pun\">=</span><span class=\"pln\"> getName</span><span class=\"pun\">();</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">hasName </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'test'</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">name </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'test'</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">setName</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">''</span></span><span class=\"pun\">);</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> name</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> checkName</span><span class=\"pun\">(</span><span class=\"pln\">hasName</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">hasName </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'test'</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> name </span><span class=\"pun\">=</span><span class=\"pln\"> getName</span><span class=\"pun\">();</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">name </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'test'</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">setName</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">''</span></span><span class=\"pun\">);</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> name</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n</li>\n</ul><p><a href=\"#variables--const\">13.1</a> Always use <code>const</code> to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that.</p><p><a name=\"variables--one-const\"></a><a name=\"13.2\"></a></p><p><a href=\"#variables--one-const\">13.2</a> Use one <code>const</code> declaration per variable. eslint: <a href=\"http://eslint.org/docs/rules/one-var.html\"><code>one-var</code></a> jscs: <a href=\"http://jscs.info/rule/disallowMultipleVarDecl\"><code>disallowMultipleVarDecl</code></a></p><p>Why? Itâ€™s easier to add new variable declarations this way, and you never have to worry about swapping out a <code>;</code> for a <code>,</code> or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.</p><p><a name=\"variables--const-let-group\"></a><a name=\"13.3\"></a></p><p><a href=\"#variables--const-let-group\">13.3</a> Group all your <code>const</code>s and then group all your <code>let</code>s.</p><p>Why? This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.</p><p><a name=\"variables--define-where-used\"></a><a name=\"13.4\"></a></p><p><a href=\"#variables--define-where-used\">13.4</a> Assign variables where you need them, but place them in a reasonable place.</p><p>Why? <code>let</code> and <code>const</code> are block scoped and not function scoped.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"VARIABLES"},{"content":"<h2 id=\"airbnb-javascript-style-guide-hoisting\">Hoisting</h2><p>  <a name=\"hoisting--about\"></a><a name=\"14.1\"></a></p><ul>\n<li><p><a href=\"#hoisting--about\">14.1</a> <code>var</code> declarations get hoisted to the top of their scope, their assignment does not. <code>const</code> and <code>let</code> declarations are blessed with a new concept called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let\">Temporal Dead Zones (TDZ)</a>. Itâ€™s important to know why <a href=\"http://es-discourse.com/t/why-typeof-is-no-longer-safe/15\">typeof is no longer safe</a>.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// we know this wouldn't work (assuming there</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// is no notDefined global variable)</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> example</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">notDefined</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; throws a ReferenceError</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// creating a variable declaration after you</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// reference the variable will work due to</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// variable hoisting. Note: the assignment</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// value of `true` is not hoisted.</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> example</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">declaredButNotAssigned</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; undefined</span></span><span class=\"pln\">\n  </span><span class=\"kwd\">var</span><span class=\"pln\"> declaredButNotAssigned </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// the interpreter is hoisting the variable</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// declaration to the top of the scope,</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// which means our example could be rewritten as:</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> example</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  let declaredButNotAssigned</span><span class=\"pun\">;</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">declaredButNotAssigned</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; undefined</span></span><span class=\"pln\">\n  declaredButNotAssigned </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// using const and let</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> example</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">declaredButNotAssigned</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; throws a ReferenceError</span></span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"kwd\">typeof</span><span class=\"pln\"> declaredButNotAssigned</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; throws a ReferenceError</span></span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> declaredButNotAssigned </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"hoisting--anon-expressions\"></a><a name=\"14.2\"></a></p>\n</li>\n<li><p><a href=\"#hoisting--anon-expressions\">14.2</a> Anonymous function expressions hoist their variable name, but not the function assignment.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">function</span><span class=\"pln\"> example</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">anonymous</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; undefined</span></span><span class=\"pln\">\n\n  anonymous</span><span class=\"pun\">();</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; TypeError anonymous is not a function</span></span><span class=\"pln\">\n\n  </span><span class=\"kwd\">var</span><span class=\"pln\"> anonymous </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'anonymous function expression'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"hoisting--named-expresions\"></a><a name=\"14.3\"></a></p>\n</li>\n<li><p><a href=\"#hoisting--named-expresions\">14.3</a> Named function expressions hoist the variable name, not the function name or the function body.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">function</span><span class=\"pln\"> example</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">named</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; undefined</span></span><span class=\"pln\">\n\n  named</span><span class=\"pun\">();</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; TypeError named is not a function</span></span><span class=\"pln\">\n\n  superPower</span><span class=\"pun\">();</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; ReferenceError superPower is not defined</span></span><span class=\"pln\">\n\n  </span><span class=\"kwd\">var</span><span class=\"pln\"> named </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> superPower</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'Flying'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// the same is true when the function name</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// is the same as the variable name.</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> example</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">named</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; undefined</span></span><span class=\"pln\">\n\n  named</span><span class=\"pun\">();</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; TypeError named is not a function</span></span><span class=\"pln\">\n\n  </span><span class=\"kwd\">var</span><span class=\"pln\"> named </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> named</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'named'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"hoisting--declarations\"></a><a name=\"14.4\"></a></p>\n</li>\n<li><p><a href=\"#hoisting--declarations\">14.4</a> Function declarations hoist their name and the function body.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">function</span><span class=\"pln\"> example</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  superPower</span><span class=\"pun\">();</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// =&gt; Flying</span></span><span class=\"pln\">\n\n  </span><span class=\"kwd\">function</span><span class=\"pln\"> superPower</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'Flying'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n</li>\n<li><p>For more information refer to <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/\">JavaScript Scoping &amp; Hoisting</a> by <a href=\"http://www.adequatelygood.com/\">Ben Cherry</a>.</p>\n</li>\n</ul><p><a href=\"#hoisting--about\">14.1</a> <code>var</code> declarations get hoisted to the top of their scope, their assignment does not. <code>const</code> and <code>let</code> declarations are blessed with a new concept called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let\">Temporal Dead Zones (TDZ)</a>. Itâ€™s important to know why <a href=\"http://es-discourse.com/t/why-typeof-is-no-longer-safe/15\">typeof is no longer safe</a>.</p><p><a name=\"hoisting--anon-expressions\"></a><a name=\"14.2\"></a></p><p><a href=\"#hoisting--anon-expressions\">14.2</a> Anonymous function expressions hoist their variable name, but not the function assignment.</p><p><a name=\"hoisting--named-expresions\"></a><a name=\"14.3\"></a></p><p><a href=\"#hoisting--named-expresions\">14.3</a> Named function expressions hoist the variable name, not the function name or the function body.</p><p><a name=\"hoisting--declarations\"></a><a name=\"14.4\"></a></p><p><a href=\"#hoisting--declarations\">14.4</a> Function declarations hoist their name and the function body.</p><p>For more information refer to <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/\">JavaScript Scoping &amp; Hoisting</a> by <a href=\"http://www.adequatelygood.com/\">Ben Cherry</a>.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"HOISTING"},{"content":"<h2 id=\"airbnb-javascript-style-guide-comparison-operators-equality\">Comparison Operators &amp; Equality</h2><p>  <a name=\"comparison--eqeqeq\"></a><a name=\"15.1\"></a></p><ul>\n<li><p><a href=\"#comparison--eqeqeq\">15.1</a> Use <code>===</code> and <code>!==</code> over <code>==</code> and <code>!=</code>. eslint: <a href=\"http://eslint.org/docs/rules/eqeqeq.html\"><code>eqeqeq</code></a></p>\n<p><a name=\"comparison--if\"></a><a name=\"15.2\"></a></p>\n</li>\n<li><p><a href=\"#comparison--if\">15.2</a> Conditional statements such as the <code>if</code> statement evaluate their expression using coercion with the <code>ToBoolean</code> abstract method and always follow these simple rules:</p>\n<ul>\n<li><strong>Objects</strong> evaluate to <strong>true</strong></li>\n<li><strong>Undefined</strong> evaluates to <strong>false</strong></li>\n<li><strong>Null</strong> evaluates to <strong>false</strong></li>\n<li><strong>Booleans</strong> evaluate to <strong>the value of the boolean</strong></li>\n<li><strong>Numbers</strong> evaluate to <strong>false</strong> if <strong>+0, -0, or NaN</strong>, otherwise <strong>true</strong></li>\n<li><strong>Strings</strong> evaluate to <strong>false</strong> if an empty string <code>''</code>, otherwise <strong>true</strong></li>\n</ul>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">([</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">&amp;&amp;</span><span class=\"pln\"> </span><span class=\"pun\">[])</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// true</span></span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// an array (even an empty one) is an object, objects will evaluate to true</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"comparison--shortcuts\"></a><a name=\"15.3\"></a></p>\n</li>\n<li><p><a href=\"#comparison--shortcuts\">15.3</a> Use shortcuts.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">name </span><span class=\"pun\">!==</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">''</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">collection</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">collection</span><span class=\"pun\">.</span><span class=\"pln\">length</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"comparison--moreinfo\"></a><a name=\"15.4\"></a></p>\n</li>\n<li><p><a href=\"#comparison--moreinfo\">15.4</a> For more information see <a href=\"http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108\">Truth Equality and JavaScript</a> by Angus Croll.</p>\n<p><a name=\"comparison--switch-blocks\"></a><a name=\"15.5\"></a></p>\n</li>\n<li><p><a href=\"#comparison--switch-blocks\">15.5</a> Use braces to create blocks in <code>case</code> and <code>default</code> clauses that contain lexical declarations (e.g. <code>let</code>, <code>const</code>, <code>function</code>, and <code>class</code>).</p>\n<blockquote>\n<p>Why? Lexical declarations are visible in the entire <code>switch</code> block but only get initialized when assigned, which only happens when its <code>case</code> is reached. This causes problems when multiple <code>case</code> clauses attempt to define the same thing.</p>\n</blockquote>\n<p>eslint rules: <a href=\"http://eslint.org/docs/rules/no-case-declarations.html\"><code>no-case-declarations</code></a>.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">switch</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">:</span><span class=\"pln\">\n    let x </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n    </span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">:</span><span class=\"pln\">\n    </span><span class=\"kwd\">const</span><span class=\"pln\"> y </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">;</span><span class=\"pln\">\n    </span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">:</span><span class=\"pln\">\n    </span><span class=\"kwd\">function</span><span class=\"pln\"> f</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{}</span><span class=\"pln\">\n    </span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">default</span><span class=\"pun\">:</span><span class=\"pln\">\n    </span><span class=\"kwd\">class</span><span class=\"pln\"> C </span><span class=\"pun\">{}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">switch</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    let x </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">;</span><span class=\"pln\">\n    </span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n  </span><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">const</span><span class=\"pln\"> y </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">;</span><span class=\"pln\">\n    </span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n  </span><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">function</span><span class=\"pln\"> f</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{}</span><span class=\"pln\">\n    </span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n  </span><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">4</span></span><span class=\"pun\">:</span><span class=\"pln\">\n    bar</span><span class=\"pun\">();</span><span class=\"pln\">\n    </span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">default</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">class</span><span class=\"pln\"> C </span><span class=\"pun\">{}</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"comparison--nested-ternaries\"></a><a name=\"15.6\"></a></p>\n</li>\n<li><p><a href=\"#comparison--nested-ternaries\">15.6</a> Ternaries should not be nested and generally be single line expressions.</p>\n<p>eslint rules: <a href=\"http://eslint.org/docs/rules/no-nested-ternary.html\"><code>no-nested-ternary</code></a>.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> maybe</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pln\"> </span><span class=\"pun\">&gt;</span><span class=\"pln\"> maybe</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pln\">\n  </span><span class=\"pun\">?</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">\"bar\"</span></span><span class=\"pln\">\n  </span><span class=\"pun\">:</span><span class=\"pln\"> value</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pln\"> </span><span class=\"pun\">&gt;</span><span class=\"pln\"> value</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pln\"> </span><span class=\"pun\">?</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">\"baz\"</span></span><span class=\"pln\"> </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// better</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> maybeNull </span><span class=\"pun\">=</span><span class=\"pln\"> value</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pln\"> </span><span class=\"pun\">&gt;</span><span class=\"pln\"> value</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pln\"> </span><span class=\"pun\">?</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'baz'</span></span><span class=\"pln\"> </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> maybe</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pln\"> </span><span class=\"pun\">&gt;</span><span class=\"pln\"> maybe</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pln\">\n  </span><span class=\"pun\">?</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'bar'</span></span><span class=\"pln\">\n  </span><span class=\"pun\">:</span><span class=\"pln\"> maybeNull</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// best</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> maybeNull </span><span class=\"pun\">=</span><span class=\"pln\"> value</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pln\"> </span><span class=\"pun\">&gt;</span><span class=\"pln\"> value</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pln\"> </span><span class=\"pun\">?</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'baz'</span></span><span class=\"pln\"> </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> maybe</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pln\"> </span><span class=\"pun\">&gt;</span><span class=\"pln\"> maybe</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pln\"> </span><span class=\"pun\">?</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'bar'</span></span><span class=\"pln\"> </span><span class=\"pun\">:</span><span class=\"pln\"> maybeNull</span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"comparison--unneeded-ternary\"></a><a name=\"15.7\"></a></p>\n</li>\n<li><p><a href=\"#comparison--unneeded-ternary\">15.7</a> Avoid unneeded ternary statements.</p>\n<p>eslint rules: <a href=\"http://eslint.org/docs/rules/no-unneeded-ternary.html\"><code>no-unneeded-ternary</code></a>.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">?</span><span class=\"pln\"> a </span><span class=\"pun\">:</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> bar </span><span class=\"pun\">=</span><span class=\"pln\"> c </span><span class=\"pun\">?</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pln\"> </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> baz </span><span class=\"pun\">=</span><span class=\"pln\"> c </span><span class=\"pun\">?</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pln\"> </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">||</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> bar </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">!!</span><span class=\"pln\">c</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> baz </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">!</span><span class=\"pln\">c</span><span class=\"pun\">;</span></code></pre>\n</li>\n</ul><p><a href=\"#comparison--eqeqeq\">15.1</a> Use <code>===</code> and <code>!==</code> over <code>==</code> and <code>!=</code>. eslint: <a href=\"http://eslint.org/docs/rules/eqeqeq.html\"><code>eqeqeq</code></a></p><p><a name=\"comparison--if\"></a><a name=\"15.2\"></a></p><p><a href=\"#comparison--if\">15.2</a> Conditional statements such as the <code>if</code> statement evaluate their expression using coercion with the <code>ToBoolean</code> abstract method and always follow these simple rules:</p><ul>\n<li><strong>Objects</strong> evaluate to <strong>true</strong></li>\n<li><strong>Undefined</strong> evaluates to <strong>false</strong></li>\n<li><strong>Null</strong> evaluates to <strong>false</strong></li>\n<li><strong>Booleans</strong> evaluate to <strong>the value of the boolean</strong></li>\n<li><strong>Numbers</strong> evaluate to <strong>false</strong> if <strong>+0, -0, or NaN</strong>, otherwise <strong>true</strong></li>\n<li><strong>Strings</strong> evaluate to <strong>false</strong> if an empty string <code>''</code>, otherwise <strong>true</strong></li>\n</ul><p><a name=\"comparison--shortcuts\"></a><a name=\"15.3\"></a></p><p><a href=\"#comparison--shortcuts\">15.3</a> Use shortcuts.</p><p><a name=\"comparison--moreinfo\"></a><a name=\"15.4\"></a></p><p><a href=\"#comparison--moreinfo\">15.4</a> For more information see <a href=\"http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108\">Truth Equality and JavaScript</a> by Angus Croll.</p><p><a name=\"comparison--switch-blocks\"></a><a name=\"15.5\"></a></p><p><a href=\"#comparison--switch-blocks\">15.5</a> Use braces to create blocks in <code>case</code> and <code>default</code> clauses that contain lexical declarations (e.g. <code>let</code>, <code>const</code>, <code>function</code>, and <code>class</code>).</p><p>Why? Lexical declarations are visible in the entire <code>switch</code> block but only get initialized when assigned, which only happens when its <code>case</code> is reached. This causes problems when multiple <code>case</code> clauses attempt to define the same thing.</p><p>eslint rules: <a href=\"http://eslint.org/docs/rules/no-case-declarations.html\"><code>no-case-declarations</code></a>.</p><p><a name=\"comparison--nested-ternaries\"></a><a name=\"15.6\"></a></p><p><a href=\"#comparison--nested-ternaries\">15.6</a> Ternaries should not be nested and generally be single line expressions.</p><p>eslint rules: <a href=\"http://eslint.org/docs/rules/no-nested-ternary.html\"><code>no-nested-ternary</code></a>.</p><p><a name=\"comparison--unneeded-ternary\"></a><a name=\"15.7\"></a></p><p><a href=\"#comparison--unneeded-ternary\">15.7</a> Avoid unneeded ternary statements.</p><p>eslint rules: <a href=\"http://eslint.org/docs/rules/no-unneeded-ternary.html\"><code>no-unneeded-ternary</code></a>.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"COMPARISON OPERATORS & EQUALITY"},{"content":"<h2 id=\"airbnb-javascript-style-guide-blocks\">Blocks</h2><p>  <a name=\"blocks--braces\"></a><a name=\"16.1\"></a></p><ul>\n<li><p><a href=\"#blocks--braces\">16.1</a> Use braces with all multi-line blocks.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">test</span><span class=\"pun\">)</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">test</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">test</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> bar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"blocks--cuddled-elses\"></a><a name=\"16.2\"></a></p>\n</li>\n<li><p><a href=\"#blocks--cuddled-elses\">16.2</a> If youâ€™re using multi-line blocks with <code>if</code> and <code>else</code>, put <code>else</code> on the same line as your <code>if</code> blockâ€™s closing brace. eslint: <a href=\"http://eslint.org/docs/rules/brace-style.html\"><code>brace-style</code></a> jscs:  <a href=\"http://jscs.info/rule/disallowNewlineBeforeBlockStatements\"><code>disallowNewlineBeforeBlockStatements</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">test</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  thing</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pun\">();</span><span class=\"pln\">\n  thing</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  thing</span><span class=\"number\"><span class=\"pln\">3</span></span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">test</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  thing</span><span class=\"number\"><span class=\"pln\">1</span></span><span class=\"pun\">();</span><span class=\"pln\">\n  thing</span><span class=\"number\"><span class=\"pln\">2</span></span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  thing</span><span class=\"number\"><span class=\"pln\">3</span></span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n</li>\n</ul><p><a href=\"#blocks--braces\">16.1</a> Use braces with all multi-line blocks.</p><p><a name=\"blocks--cuddled-elses\"></a><a name=\"16.2\"></a></p><p><a href=\"#blocks--cuddled-elses\">16.2</a> If youâ€™re using multi-line blocks with <code>if</code> and <code>else</code>, put <code>else</code> on the same line as your <code>if</code> blockâ€™s closing brace. eslint: <a href=\"http://eslint.org/docs/rules/brace-style.html\"><code>brace-style</code></a> jscs:  <a href=\"http://jscs.info/rule/disallowNewlineBeforeBlockStatements\"><code>disallowNewlineBeforeBlockStatements</code></a></p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"BLOCKS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-comments\">Comments</h2><p>  <a name=\"comments--multiline\"></a><a name=\"17.1\"></a></p><ul>\n<li><p><a href=\"#comments--multiline\">17.1</a> Use <code>/** ... */</code> for multi-line comments. Include a description, specify types and values for all parameters and return values.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// make() returns a new element</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// based on the passed in tag name</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">//</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// @param {String} tag</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// @return {Element} element</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> make</span><span class=\"pun\">(</span><span class=\"pln\">tag</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> element</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"com\">/**\n * make() returns a new element\n * based on the passed in tag name\n *\n * @param {String} tag\n * @return {Element} element\n */</span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> make</span><span class=\"pun\">(</span><span class=\"pln\">tag</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> element</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"comments--singleline\"></a><a name=\"17.2\"></a></p>\n</li>\n<li><p><a href=\"#comments--singleline\">17.2</a> Use <code>//</code> for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless itâ€™s on the first line of a block.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> active </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">  </span><span class=\"comment\"><span class=\"com\">// is current tab</span></span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// is current tab</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> active </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> getType</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'fetching type...'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// set the default type to </span><span class=\"string\"><span class=\"com\">'no type'</span></span></span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> type </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">_type </span><span class=\"pun\">||</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'no type'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> type</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> getType</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'fetching type...'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n\n  </span><span class=\"comment\"><span class=\"com\">// set the default type to </span><span class=\"string\"><span class=\"com\">'no type'</span></span></span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> type </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">_type </span><span class=\"pun\">||</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'no type'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> type</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// also good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> getType</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// set the default type to </span><span class=\"string\"><span class=\"com\">'no type'</span></span></span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> type </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">_type </span><span class=\"pun\">||</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'no type'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> type</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"comments--actionitems\"></a><a name=\"17.3\"></a></p>\n</li>\n<li><p><a href=\"#comments--actionitems\">17.3</a> Prefixing your comments with <code>FIXME</code> or <code>TODO</code> helps other developers quickly understand if youâ€™re pointing out a problem that needs to be revisited, or if youâ€™re suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are <code>FIXME: -- need to figure this out</code> or <code>TODO: -- need to implement</code>.</p>\n<p><a name=\"comments--fixme\"></a><a name=\"17.4\"></a></p>\n</li>\n<li><p><a href=\"#comments--fixme\">17.4</a> Use <code>// FIXME:</code> to annotate problems.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Calculator</span><span class=\"pln\"> extends </span><span class=\"typ\">Abacus</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  constructor</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    super</span><span class=\"pun\">();</span><span class=\"pln\">\n\n    </span><span class=\"comment\"><span class=\"com\">// FIXME: shouldn't use a global here</span></span><span class=\"pln\">\n    total </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"comments--todo\"></a><a name=\"17.5\"></a></p>\n</li>\n<li><p><a href=\"#comments--todo\">17.5</a> Use <code>// TODO:</code> to annotate solutions to problems.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Calculator</span><span class=\"pln\"> extends </span><span class=\"typ\">Abacus</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  constructor</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    super</span><span class=\"pun\">();</span><span class=\"pln\">\n\n    </span><span class=\"comment\"><span class=\"com\">// TODO: total should be configurable by an options param</span></span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">total </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n</li>\n</ul><p><a href=\"#comments--multiline\">17.1</a> Use <code>/** ... */</code> for multi-line comments. Include a description, specify types and values for all parameters and return values.</p><p><a name=\"comments--singleline\"></a><a name=\"17.2\"></a></p><p><a href=\"#comments--singleline\">17.2</a> Use <code>//</code> for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless itâ€™s on the first line of a block.</p><p><a name=\"comments--actionitems\"></a><a name=\"17.3\"></a></p><p><a href=\"#comments--actionitems\">17.3</a> Prefixing your comments with <code>FIXME</code> or <code>TODO</code> helps other developers quickly understand if youâ€™re pointing out a problem that needs to be revisited, or if youâ€™re suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are <code>FIXME: -- need to figure this out</code> or <code>TODO: -- need to implement</code>.</p><p><a name=\"comments--fixme\"></a><a name=\"17.4\"></a></p><p><a href=\"#comments--fixme\">17.4</a> Use <code>// FIXME:</code> to annotate problems.</p><p><a name=\"comments--todo\"></a><a name=\"17.5\"></a></p><p><a href=\"#comments--todo\">17.5</a> Use <code>// TODO:</code> to annotate solutions to problems.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"COMMENTS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-whitespace\">Whitespace</h2><p>  <a name=\"whitespace--spaces\"></a><a name=\"18.1\"></a></p><ul>\n<li><p><a href=\"#whitespace--spaces\">18.1</a> Use soft tabs set to 2 spaces. eslint: <a href=\"http://eslint.org/docs/rules/indent.html\"><code>indent</code></a> jscs: <a href=\"http://jscs.info/rule/validateIndentation\"><code>validateIndentation</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n</span><span class=\"pun\">âˆ™âˆ™âˆ™âˆ™</span><span class=\"kwd\">const</span><span class=\"pln\"> name</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> bar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n</span><span class=\"pun\">âˆ™</span><span class=\"kwd\">const</span><span class=\"pln\"> name</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> baz</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n</span><span class=\"pun\">âˆ™âˆ™</span><span class=\"kwd\">const</span><span class=\"pln\"> name</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"whitespace--before-blocks\"></a><a name=\"18.2\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--before-blocks\">18.2</a> Place 1 space before the leading brace. eslint: <a href=\"http://eslint.org/docs/rules/space-before-blocks.html\"><code>space-before-blocks</code></a> jscs: <a href=\"http://jscs.info/rule/requireSpaceBeforeBlockStatements\"><code>requireSpaceBeforeBlockStatements</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> test</span><span class=\"pun\">(){</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'test'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> test</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'test'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\ndog</span><span class=\"pun\">.</span><span class=\"kwd\">set</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'attr'</span></span><span class=\"pun\">,{</span><span class=\"pln\">\n  age</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'</span><span class=\"number\"><span class=\"str\">1</span></span><span class=\"str\"> year'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  breed</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Bernese Mountain Dog'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\ndog</span><span class=\"pun\">.</span><span class=\"kwd\">set</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'attr'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  age</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'</span><span class=\"number\"><span class=\"str\">1</span></span><span class=\"str\"> year'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  breed</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Bernese Mountain Dog'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">});</span></code></pre>\n<p><a name=\"whitespace--around-keywords\"></a><a name=\"18.3\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--around-keywords\">18.3</a> Place 1 space before the opening parenthesis in control statements (<code>if</code>, <code>while</code> etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: <a href=\"http://eslint.org/docs/rules/space-after-keywords.html\"><code>space-after-keywords</code></a>, <a href=\"http://eslint.org/docs/rules/space-before-keywords.html\"><code>space-before-keywords</code></a> jscs:  <a href=\"http://jscs.info/rule/requireSpaceAfterKeywords\"><code>requireSpaceAfterKeywords</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">isJedi</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  fight </span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">isJedi</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  fight</span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> fight </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'Swooosh!'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> fight</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'Swooosh!'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"whitespace--infix-ops\"></a><a name=\"18.4\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--infix-ops\">18.4</a> Set off operators with spaces. eslint: <a href=\"http://eslint.org/docs/rules/space-infix-ops.html\"><code>space-infix-ops</code></a> jscs: <a href=\"http://jscs.info/rule/requireSpaceBeforeBinaryOperators\"><code>requireSpaceBeforeBinaryOperators</code></a>, <a href=\"http://jscs.info/rule/requireSpaceAfterBinaryOperators\"><code>requireSpaceAfterBinaryOperators</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> x</span><span class=\"pun\">=</span><span class=\"pln\">y</span><span class=\"pun\">+</span><span class=\"number\"><span class=\"lit\">5</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> x </span><span class=\"pun\">=</span><span class=\"pln\"> y </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">5</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"whitespace--newline-at-end\"></a><a name=\"18.5\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--newline-at-end\">18.5</a> End files with a single newline character.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"pun\">(</span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">global</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">})(</span><span class=\"kwd\">this</span><span class=\"pun\">);</span></code></pre>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"pun\">(</span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">global</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">})(</span><span class=\"kwd\">this</span><span class=\"pun\">);â†µ</span><span class=\"pln\">\n</span><span class=\"pun\">â†µ</span></code></pre>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">(</span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">global</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">})(</span><span class=\"kwd\">this</span><span class=\"pun\">);â†µ</span></code></pre>\n<p><a name=\"whitespace--chains\"></a><a name=\"18.6\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--chains\">18.6</a> Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which\nemphasizes that the line is a method call, not a new statement. eslint: <a href=\"http://eslint.org/docs/rules/newline-per-chained-call\"><code>newline-per-chained-call</code></a> <a href=\"http://eslint.org/docs/rules/no-whitespace-before-property\"><code>no-whitespace-before-property</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n$</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'</span><span class=\"comment\"><span class=\"str\">#items'</span></span><span class=\"pun\">).</span><span class=\"pln\">find</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.selected'</span></span><span class=\"pun\">).</span><span class=\"pln\">highlight</span><span class=\"pun\">().</span><span class=\"pln\">end</span><span class=\"pun\">().</span><span class=\"pln\">find</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.open'</span></span><span class=\"pun\">).</span><span class=\"pln\">updateCount</span><span class=\"pun\">();</span></span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n$</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'</span><span class=\"comment\"><span class=\"str\">#items'</span></span><span class=\"pun\">).</span></span><span class=\"pln\">\n  find</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.selected'</span></span><span class=\"pun\">).</span><span class=\"pln\">\n    highlight</span><span class=\"pun\">().</span><span class=\"pln\">\n    end</span><span class=\"pun\">().</span><span class=\"pln\">\n  find</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.open'</span></span><span class=\"pun\">).</span><span class=\"pln\">\n    updateCount</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n$</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'</span><span class=\"comment\"><span class=\"str\">#items'</span></span><span class=\"pun\">)</span></span><span class=\"pln\">\n  </span><span class=\"pun\">.</span><span class=\"pln\">find</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.selected'</span></span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">highlight</span><span class=\"pun\">()</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">end</span><span class=\"pun\">()</span><span class=\"pln\">\n  </span><span class=\"pun\">.</span><span class=\"pln\">find</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.open'</span></span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">updateCount</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> leds </span><span class=\"pun\">=</span><span class=\"pln\"> stage</span><span class=\"pun\">.</span><span class=\"pln\">selectAll</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.led'</span></span><span class=\"pun\">).</span><span class=\"pln\">data</span><span class=\"pun\">(</span><span class=\"pln\">data</span><span class=\"pun\">).</span><span class=\"pln\">enter</span><span class=\"pun\">().</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'svg:svg'</span></span><span class=\"pun\">).</span><span class=\"pln\">classed</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'led'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'width'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">radius </span><span class=\"pun\">+</span><span class=\"pln\"> margin</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">).</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'svg:g'</span></span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'transform'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'translate('</span></span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">radius </span><span class=\"pun\">+</span><span class=\"pln\"> margin</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">','</span></span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">radius </span><span class=\"pun\">+</span><span class=\"pln\"> margin</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">')'</span></span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">call</span><span class=\"pun\">(</span><span class=\"pln\">tron</span><span class=\"pun\">.</span><span class=\"pln\">led</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> leds </span><span class=\"pun\">=</span><span class=\"pln\"> stage</span><span class=\"pun\">.</span><span class=\"pln\">selectAll</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.led'</span></span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">(</span><span class=\"pln\">data</span><span class=\"pun\">)</span><span class=\"pln\">\n  </span><span class=\"pun\">.</span><span class=\"pln\">enter</span><span class=\"pun\">().</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'svg:svg'</span></span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">classed</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'led'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'width'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">radius </span><span class=\"pun\">+</span><span class=\"pln\"> margin</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">)</span><span class=\"pln\">\n  </span><span class=\"pun\">.</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'svg:g'</span></span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'transform'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'translate('</span></span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">radius </span><span class=\"pun\">+</span><span class=\"pln\"> margin</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">','</span></span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">radius </span><span class=\"pun\">+</span><span class=\"pln\"> margin</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">')'</span></span><span class=\"pun\">)</span><span class=\"pln\">\n    </span><span class=\"pun\">.</span><span class=\"pln\">call</span><span class=\"pun\">(</span><span class=\"pln\">tron</span><span class=\"pun\">.</span><span class=\"pln\">led</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> leds </span><span class=\"pun\">=</span><span class=\"pln\"> stage</span><span class=\"pun\">.</span><span class=\"pln\">selectAll</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.led'</span></span><span class=\"pun\">).</span><span class=\"pln\">data</span><span class=\"pun\">(</span><span class=\"pln\">data</span><span class=\"pun\">);</span></code></pre>\n<p><a name=\"whitespace--after-blocks\"></a><a name=\"18.7\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--after-blocks\">18.7</a> Leave a blank line after blocks and before the next statement. jscs: <a href=\"http://jscs.info/rule/requirePaddingNewLinesAfterBlocks\"><code>requirePaddingNewLinesAfterBlocks</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> bar</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"kwd\">return</span><span class=\"pln\"> baz</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> bar</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"kwd\">return</span><span class=\"pln\"> baz</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> obj </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n  bar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"kwd\">return</span><span class=\"pln\"> obj</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> obj </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n\n  bar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">return</span><span class=\"pln\"> obj</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> arr </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">\n  </span><span class=\"kwd\">function</span><span class=\"pln\"> foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n  </span><span class=\"kwd\">function</span><span class=\"pln\"> bar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n</span><span class=\"pun\">];</span><span class=\"pln\">\n</span><span class=\"kwd\">return</span><span class=\"pln\"> arr</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> arr </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">\n  </span><span class=\"kwd\">function</span><span class=\"pln\"> foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">function</span><span class=\"pln\"> bar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"pun\">},</span><span class=\"pln\">\n</span><span class=\"pun\">];</span><span class=\"pln\">\n\n</span><span class=\"kwd\">return</span><span class=\"pln\"> arr</span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"whitespace--padded-blocks\"></a><a name=\"18.8\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--padded-blocks\">18.8</a> Do not pad your blocks with blank lines. eslint: <a href=\"http://eslint.org/docs/rules/padded-blocks.html\"><code>padded-blocks</code></a> jscs:  <a href=\"http://jscs.info/rule/disallowPaddingNewlinesInBlocks\"><code>disallowPaddingNewlinesInBlocks</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> bar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// also bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">baz</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">qux</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> bar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">baz</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">qux</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"whitespace--in-parens\"></a><a name=\"18.9\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--in-parens\">18.9</a> Do not add spaces inside parentheses. eslint: <a href=\"http://eslint.org/docs/rules/space-in-parens.html\"><code>space-in-parens</code></a> jscs: <a href=\"http://jscs.info/rule/disallowSpacesInsideParentheses\"><code>disallowSpacesInsideParentheses</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> bar</span><span class=\"pun\">(</span><span class=\"pln\"> foo </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> foo</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> bar</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> foo</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\"> foo </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"whitespace--in-brackets\"></a><a name=\"18.10\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--in-brackets\">18.10</a> Do not add spaces inside brackets. eslint: <a href=\"http://eslint.org/docs/rules/array-bracket-spacing.html\"><code>array-bracket-spacing</code></a> jscs: <a href=\"http://jscs.info/rule/disallowSpacesInsideArrayBrackets\"><code>disallowSpacesInsideArrayBrackets</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pln\"> </span><span class=\"pun\">];</span><span class=\"pln\">\nconsole</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">[</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pln\"> </span><span class=\"pun\">]);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">1</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">2</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">3</span></span><span class=\"pun\">];</span><span class=\"pln\">\nconsole</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">foo</span><span class=\"pun\">[</span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">]);</span></code></pre>\n<p><a name=\"whitespace--in-braces\"></a><a name=\"18.11\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--in-braces\">18.11</a> Add spaces inside curly braces. eslint: <a href=\"http://eslint.org/docs/rules/object-curly-spacing.html\"><code>object-curly-spacing</code></a> jscs: <a href=\"http://jscs.info/rule/disallowSpacesInsideObjectBrackets\"><code>disallowSpacesInsideObjectBrackets</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">clark</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'kent'</span></span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> clark</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'kent'</span></span><span class=\"pln\"> </span><span class=\"pun\">};</span></code></pre>\n<p><a name=\"whitespace--max-len\"></a><a name=\"18.12\"></a></p>\n</li>\n<li><p><a href=\"#whitespace--max-len\">18.12</a> Avoid having lines of code that are longer than 100 characters (including whitespace). eslint: <a href=\"http://eslint.org/docs/rules/max-len.html\"><code>max-len</code></a> jscs: <a href=\"http://jscs.info/rule/maximumLineLength\"><code>maximumLineLength</code></a></p>\n<blockquote>\n<p>Why? This ensures readability and maintainability.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Whatever national crop flips the window. The cartoon reverts within the screw. Whatever wizard constrains a helpful ally. The counterpart ascends!'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n$</span><span class=\"pun\">.</span><span class=\"pln\">ajax</span><span class=\"pun\">({</span><span class=\"pln\"> method</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'POST'</span></span><span class=\"pun\">,</span><span class=\"pln\"> url</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'https:</span><span class=\"comment\"><span class=\"str\">//airbnb.com/'</span></span><span class=\"pun\">,</span><span class=\"pln\"> data</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> name</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'John'</span></span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"pun\">}).</span><span class=\"pln\">done</span><span class=\"pun\">(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'Congratulations!'</span></span><span class=\"pun\">)).</span><span class=\"pln\">fail</span><span class=\"pun\">(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'You have failed this city.'</span></span><span class=\"pun\">));</span></span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> foo </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Whatever national crop flips the window. The cartoon reverts within the screw. '</span></span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'Whatever wizard constrains a helpful ally. The counterpart ascends!'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n$</span><span class=\"pun\">.</span><span class=\"pln\">ajax</span><span class=\"pun\">({</span><span class=\"pln\">\n  method</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'POST'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  url</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'https:</span><span class=\"comment\"><span class=\"str\">//airbnb.com/'</span></span><span class=\"pun\">,</span></span><span class=\"pln\">\n  data</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> name</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'John'</span></span><span class=\"pln\"> </span><span class=\"pun\">},</span><span class=\"pln\">\n</span><span class=\"pun\">})</span><span class=\"pln\">\n  </span><span class=\"pun\">.</span><span class=\"pln\">done</span><span class=\"pun\">(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'Congratulations!'</span></span><span class=\"pun\">))</span><span class=\"pln\">\n  </span><span class=\"pun\">.</span><span class=\"pln\">fail</span><span class=\"pun\">(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'You have failed this city.'</span></span><span class=\"pun\">));</span></code></pre>\n</li>\n</ul><p><a href=\"#whitespace--spaces\">18.1</a> Use soft tabs set to 2 spaces. eslint: <a href=\"http://eslint.org/docs/rules/indent.html\"><code>indent</code></a> jscs: <a href=\"http://jscs.info/rule/validateIndentation\"><code>validateIndentation</code></a></p><p><a name=\"whitespace--before-blocks\"></a><a name=\"18.2\"></a></p><p><a href=\"#whitespace--before-blocks\">18.2</a> Place 1 space before the leading brace. eslint: <a href=\"http://eslint.org/docs/rules/space-before-blocks.html\"><code>space-before-blocks</code></a> jscs: <a href=\"http://jscs.info/rule/requireSpaceBeforeBlockStatements\"><code>requireSpaceBeforeBlockStatements</code></a></p><p><a name=\"whitespace--around-keywords\"></a><a name=\"18.3\"></a></p><p><a href=\"#whitespace--around-keywords\">18.3</a> Place 1 space before the opening parenthesis in control statements (<code>if</code>, <code>while</code> etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: <a href=\"http://eslint.org/docs/rules/space-after-keywords.html\"><code>space-after-keywords</code></a>, <a href=\"http://eslint.org/docs/rules/space-before-keywords.html\"><code>space-before-keywords</code></a> jscs:  <a href=\"http://jscs.info/rule/requireSpaceAfterKeywords\"><code>requireSpaceAfterKeywords</code></a></p><p><a name=\"whitespace--infix-ops\"></a><a name=\"18.4\"></a></p><p><a href=\"#whitespace--infix-ops\">18.4</a> Set off operators with spaces. eslint: <a href=\"http://eslint.org/docs/rules/space-infix-ops.html\"><code>space-infix-ops</code></a> jscs: <a href=\"http://jscs.info/rule/requireSpaceBeforeBinaryOperators\"><code>requireSpaceBeforeBinaryOperators</code></a>, <a href=\"http://jscs.info/rule/requireSpaceAfterBinaryOperators\"><code>requireSpaceAfterBinaryOperators</code></a></p><p><a name=\"whitespace--newline-at-end\"></a><a name=\"18.5\"></a></p><p><a href=\"#whitespace--newline-at-end\">18.5</a> End files with a single newline character.</p><p><a name=\"whitespace--chains\"></a><a name=\"18.6\"></a></p><p><a href=\"#whitespace--chains\">18.6</a> Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which\nemphasizes that the line is a method call, not a new statement. eslint: <a href=\"http://eslint.org/docs/rules/newline-per-chained-call\"><code>newline-per-chained-call</code></a> <a href=\"http://eslint.org/docs/rules/no-whitespace-before-property\"><code>no-whitespace-before-property</code></a></p><p><a name=\"whitespace--after-blocks\"></a><a name=\"18.7\"></a></p><p><a href=\"#whitespace--after-blocks\">18.7</a> Leave a blank line after blocks and before the next statement. jscs: <a href=\"http://jscs.info/rule/requirePaddingNewLinesAfterBlocks\"><code>requirePaddingNewLinesAfterBlocks</code></a></p><p><a name=\"whitespace--padded-blocks\"></a><a name=\"18.8\"></a></p><p><a href=\"#whitespace--padded-blocks\">18.8</a> Do not pad your blocks with blank lines. eslint: <a href=\"http://eslint.org/docs/rules/padded-blocks.html\"><code>padded-blocks</code></a> jscs:  <a href=\"http://jscs.info/rule/disallowPaddingNewlinesInBlocks\"><code>disallowPaddingNewlinesInBlocks</code></a></p><p><a name=\"whitespace--in-parens\"></a><a name=\"18.9\"></a></p><p><a href=\"#whitespace--in-parens\">18.9</a> Do not add spaces inside parentheses. eslint: <a href=\"http://eslint.org/docs/rules/space-in-parens.html\"><code>space-in-parens</code></a> jscs: <a href=\"http://jscs.info/rule/disallowSpacesInsideParentheses\"><code>disallowSpacesInsideParentheses</code></a></p><p><a name=\"whitespace--in-brackets\"></a><a name=\"18.10\"></a></p><p><a href=\"#whitespace--in-brackets\">18.10</a> Do not add spaces inside brackets. eslint: <a href=\"http://eslint.org/docs/rules/array-bracket-spacing.html\"><code>array-bracket-spacing</code></a> jscs: <a href=\"http://jscs.info/rule/disallowSpacesInsideArrayBrackets\"><code>disallowSpacesInsideArrayBrackets</code></a></p><p><a name=\"whitespace--in-braces\"></a><a name=\"18.11\"></a></p><p><a href=\"#whitespace--in-braces\">18.11</a> Add spaces inside curly braces. eslint: <a href=\"http://eslint.org/docs/rules/object-curly-spacing.html\"><code>object-curly-spacing</code></a> jscs: <a href=\"http://jscs.info/rule/disallowSpacesInsideObjectBrackets\"><code>disallowSpacesInsideObjectBrackets</code></a></p><p><a name=\"whitespace--max-len\"></a><a name=\"18.12\"></a></p><p><a href=\"#whitespace--max-len\">18.12</a> Avoid having lines of code that are longer than 100 characters (including whitespace). eslint: <a href=\"http://eslint.org/docs/rules/max-len.html\"><code>max-len</code></a> jscs: <a href=\"http://jscs.info/rule/maximumLineLength\"><code>maximumLineLength</code></a></p><p>Why? This ensures readability and maintainability.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"WHITESPACE"},{"content":"<h2 id=\"airbnb-javascript-style-guide-commas\">Commas</h2><p><a name=\"commas--leading-trailing\"></a><a name=\"19.1\"></a></p><ul>\n<li><p><a href=\"#commas--leading-trailing\">19.1</a> Leading commas: <strong>Nope.</strong> eslint: <a href=\"http://eslint.org/docs/rules/comma-style.html\"><code>comma-style</code></a> jscs: <a href=\"http://jscs.info/rule/requireCommaBeforeLineBreak\"><code>requireCommaBeforeLineBreak</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> story </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">\n    once\n  </span><span class=\"pun\">,</span><span class=\"pln\"> upon\n  </span><span class=\"pun\">,</span><span class=\"pln\"> aTime\n</span><span class=\"pun\">];</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> story </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">\n  once</span><span class=\"pun\">,</span><span class=\"pln\">\n  upon</span><span class=\"pun\">,</span><span class=\"pln\">\n  aTime</span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">];</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> hero </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    firstName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Ada'</span></span><span class=\"pln\">\n  </span><span class=\"pun\">,</span><span class=\"pln\"> lastName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Lovelace'</span></span><span class=\"pln\">\n  </span><span class=\"pun\">,</span><span class=\"pln\"> birthYear</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1815</span></span><span class=\"pln\">\n  </span><span class=\"pun\">,</span><span class=\"pln\"> superPower</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'computers'</span></span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> hero </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  firstName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Ada'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  lastName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Lovelace'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  birthYear</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">1815</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  superPower</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'computers'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span></code></pre>\n<p><a name=\"commas--dangling\"></a><a name=\"19.2\"></a></p>\n</li>\n<li><p><a href=\"#commas--dangling\">19.2</a> Additional trailing comma: <strong>Yup.</strong> eslint: <a href=\"http://eslint.org/docs/rules/comma-dangle.html\"><code>comma-dangle</code></a> jscs: <a href=\"http://jscs.info/rule/requireTrailingComma\"><code>requireTrailingComma</code></a></p>\n<blockquote>\n<p>Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you donâ€™t have to worry about the <a href=\"es5/README.md#commas\">trailing comma problem</a> in legacy browsers.</p>\n</blockquote>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad - git diff without trailing comma</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> hero </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n     firstName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Florence'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">-</span><span class=\"pln\">    lastName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Nightingale'</span></span><span class=\"pln\">\n</span><span class=\"pun\">+</span><span class=\"pln\">    lastName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Nightingale'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">+</span><span class=\"pln\">    inventorOf</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"string\"><span class=\"str\">'coxcomb graph'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'modern nursing'</span></span><span class=\"pun\">]</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good - git diff with trailing comma</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> hero </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n     firstName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Florence'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n     lastName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Nightingale'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">+</span><span class=\"pln\">    inventorOf</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"string\"><span class=\"str\">'coxcomb chart'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'modern nursing'</span></span><span class=\"pun\">],</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> hero </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  firstName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Dana'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  lastName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Scully'</span></span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">const</span><span class=\"pln\"> heroes </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'Batman'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'Superman'</span></span><span class=\"pln\">\n</span><span class=\"pun\">];</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> hero </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  firstName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Dana'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  lastName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Scully'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">const</span><span class=\"pln\"> heroes </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'Batman'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">'Superman'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">];</span></code></pre>\n</li>\n</ul><p><a href=\"#commas--leading-trailing\">19.1</a> Leading commas: <strong>Nope.</strong> eslint: <a href=\"http://eslint.org/docs/rules/comma-style.html\"><code>comma-style</code></a> jscs: <a href=\"http://jscs.info/rule/requireCommaBeforeLineBreak\"><code>requireCommaBeforeLineBreak</code></a></p><p><a name=\"commas--dangling\"></a><a name=\"19.2\"></a></p><p><a href=\"#commas--dangling\">19.2</a> Additional trailing comma: <strong>Yup.</strong> eslint: <a href=\"http://eslint.org/docs/rules/comma-dangle.html\"><code>comma-dangle</code></a> jscs: <a href=\"http://jscs.info/rule/requireTrailingComma\"><code>requireTrailingComma</code></a></p><p>Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you donâ€™t have to worry about the <a href=\"es5/README.md#commas\">trailing comma problem</a> in legacy browsers.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"COMMAS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-semicolons\">Semicolons</h2><p>  <a name=\"semicolons--required\"></a><a name=\"20.1\"></a></p><ul>\n<li><p><a href=\"#20.1\">20.1</a> <strong>Yup.</strong> eslint: <a href=\"http://eslint.org/docs/rules/semi.html\"><code>semi</code></a> jscs: <a href=\"http://jscs.info/rule/requireSemicolons\"><code>requireSemicolons</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"pun\">(</span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> name </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Skywalker'</span></span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> name\n</span><span class=\"pun\">})()</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"pun\">(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> name </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Skywalker'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> name</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}());</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good (guards against the function becoming an argument when two files with IIFEs are concatenated)</span></span><span class=\"pln\">\n</span><span class=\"pun\">;(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> name </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Skywalker'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> name</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}());</span></code></pre>\n<p><a href=\"http://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214%237365214\">Read more</a>.</p>\n</li>\n</ul><p><a href=\"#20.1\">20.1</a> <strong>Yup.</strong> eslint: <a href=\"http://eslint.org/docs/rules/semi.html\"><code>semi</code></a> jscs: <a href=\"http://jscs.info/rule/requireSemicolons\"><code>requireSemicolons</code></a></p><p><a href=\"http://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214%237365214\">Read more</a>.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"SEMICOLONS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-type-casting-coercion\">Type Casting &amp; Coercion</h2><p>  <a name=\"coercion--explicit\"></a><a name=\"21.1\"></a></p><ul>\n<li><p><a href=\"#coercion--explicit\">21.1</a> Perform type coercion at the beginning of the statement.</p>\n<p><a name=\"coercion--strings\"></a><a name=\"21.2\"></a></p>\n</li>\n<li><p><a href=\"#coercion--strings\">21.2</a>  Strings:</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// =&gt; this.reviewScore = </span><span class=\"number\"><span class=\"com\">9</span></span><span class=\"com\">;</span></span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> totalScore </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">reviewScore </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">''</span></span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// invokes this.reviewScore.valueOf()</span></span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> totalScore </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">reviewScore</span><span class=\"pun\">.</span><span class=\"pln\">toString</span><span class=\"pun\">();</span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">// isn't guaranteed to return a string</span></span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> totalScore </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pun\">(</span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">reviewScore</span><span class=\"pun\">);</span></code></pre>\n<p><a name=\"coercion--numbers\"></a><a name=\"21.3\"></a></p>\n</li>\n<li><p><a href=\"#coercion--numbers\">21.3</a> Numbers: Use <code>Number</code> for type casting and <code>parseInt</code> always with a radix for parsing strings. eslint: <a href=\"http://eslint.org/docs/rules/radix\"><code>radix</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> inputValue </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'</span><span class=\"number\"><span class=\"str\">4</span></span><span class=\"str\">'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> val </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Number</span><span class=\"pun\">(</span><span class=\"pln\">inputValue</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> val </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\">inputValue</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> val </span><span class=\"pun\">=</span><span class=\"pln\"> inputValue </span><span class=\"pun\">&gt;&gt;</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> val </span><span class=\"pun\">=</span><span class=\"pln\"> parseInt</span><span class=\"pun\">(</span><span class=\"pln\">inputValue</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> val </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Number</span><span class=\"pun\">(</span><span class=\"pln\">inputValue</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> val </span><span class=\"pun\">=</span><span class=\"pln\"> parseInt</span><span class=\"pun\">(</span><span class=\"pln\">inputValue</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">10</span></span><span class=\"pun\">);</span></code></pre>\n<p><a name=\"coercion--comment-deviations\"></a><a name=\"21.4\"></a></p>\n</li>\n<li><p><a href=\"#coercion--comment-deviations\">21.4</a> If for whatever reason you are doing something wild and <code>parseInt</code> is your bottleneck and need to use Bitshift for <a href=\"http://jsperf.com/coercion-vs-casting/3\">performance reasons</a>, leave a comment explaining why and what youâ€™re doing.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"com\">/**\n * parseInt was the reason my code was slow.\n * Bitshifting the String to coerce it to a\n * Number made it a lot faster.\n */</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> val </span><span class=\"pun\">=</span><span class=\"pln\"> inputValue </span><span class=\"pun\">&gt;&gt;</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"coercion--bitwise\"></a><a name=\"21.5\"></a></p>\n</li>\n<li><p><a href=\"#coercion--bitwise\">21.5</a> <strong>Note:</strong> Be careful when using bitshift operations. Numbers are represented as <a href=\"http://es5.github.io/#x4.3.19\">64-bit values</a>, but bitshift operations always return a 32-bit integer (<a href=\"http://es5.github.io/#x11.7\">source</a>). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. <a href=\"https://github.com/airbnb/javascript/issues/109\">Discussion</a>. Largest signed 32-bit Int is 2,147,483,647:</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"number\"><span class=\"lit\">2147483647</span></span><span class=\"pln\"> </span><span class=\"pun\">&gt;&gt;</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">//=&gt; </span><span class=\"number\"><span class=\"com\">2147483647</span></span></span><span class=\"pln\">\n</span><span class=\"number\"><span class=\"lit\">2147483648</span></span><span class=\"pln\"> </span><span class=\"pun\">&gt;&gt;</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">//=&gt; -</span><span class=\"number\"><span class=\"com\">2147483648</span></span></span><span class=\"pln\">\n</span><span class=\"number\"><span class=\"lit\">2147483649</span></span><span class=\"pln\"> </span><span class=\"pun\">&gt;&gt;</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pln\"> </span><span class=\"comment\"><span class=\"com\">//=&gt; -</span><span class=\"number\"><span class=\"com\">2147483647</span></span></span>\n</code></pre>\n<p><a name=\"coercion--booleans\"></a><a name=\"21.6\"></a></p>\n</li>\n<li><p><a href=\"#coercion--booleans\">21.6</a> Booleans:</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> age </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"number\"><span class=\"lit\">0</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> hasAge </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Boolean</span><span class=\"pun\">(</span><span class=\"pln\">age</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> hasAge </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Boolean</span><span class=\"pun\">(</span><span class=\"pln\">age</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> hasAge </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">!!</span><span class=\"pln\">age</span><span class=\"pun\">;</span></code></pre>\n</li>\n</ul><p><a href=\"#coercion--explicit\">21.1</a> Perform type coercion at the beginning of the statement.</p><p><a name=\"coercion--strings\"></a><a name=\"21.2\"></a></p><p><a href=\"#coercion--strings\">21.2</a>  Strings:</p><p><a name=\"coercion--numbers\"></a><a name=\"21.3\"></a></p><p><a href=\"#coercion--numbers\">21.3</a> Numbers: Use <code>Number</code> for type casting and <code>parseInt</code> always with a radix for parsing strings. eslint: <a href=\"http://eslint.org/docs/rules/radix\"><code>radix</code></a></p><p><a name=\"coercion--comment-deviations\"></a><a name=\"21.4\"></a></p><p><a href=\"#coercion--comment-deviations\">21.4</a> If for whatever reason you are doing something wild and <code>parseInt</code> is your bottleneck and need to use Bitshift for <a href=\"http://jsperf.com/coercion-vs-casting/3\">performance reasons</a>, leave a comment explaining why and what youâ€™re doing.</p><p><a name=\"coercion--bitwise\"></a><a name=\"21.5\"></a></p><p><a href=\"#coercion--bitwise\">21.5</a> <strong>Note:</strong> Be careful when using bitshift operations. Numbers are represented as <a href=\"http://es5.github.io/#x4.3.19\">64-bit values</a>, but bitshift operations always return a 32-bit integer (<a href=\"http://es5.github.io/#x11.7\">source</a>). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. <a href=\"https://github.com/airbnb/javascript/issues/109\">Discussion</a>. Largest signed 32-bit Int is 2,147,483,647:</p><p><a name=\"coercion--booleans\"></a><a name=\"21.6\"></a></p><p><a href=\"#coercion--booleans\">21.6</a> Booleans:</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"TYPE CASTING & COERCION"},{"content":"<h2 id=\"airbnb-javascript-style-guide-naming-conventions\">Naming Conventions</h2><p>  <a name=\"naming--descriptive\"></a><a name=\"22.1\"></a></p><ul>\n<li><p><a href=\"#naming--descriptive\">22.1</a> Avoid single letter names. Be descriptive with your naming.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> q</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> query</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ..stuff..</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"naming--camelCase\"></a><a name=\"22.2\"></a></p>\n</li>\n<li><p><a href=\"#naming--camelCase\">22.2</a> Use camelCase when naming objects, functions, and instances. eslint: <a href=\"http://eslint.org/docs/rules/camelcase.html\"><code>camelcase</code></a> jscs: <a href=\"http://jscs.info/rule/requireCamelCaseOrUpperCaseIdentifiers\"><code>requireCamelCaseOrUpperCaseIdentifiers</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">OBJEcttsssss</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> this_is_my_object </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> c</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> thisIsMyObject </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> thisIsMyFunction</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{}</span></code></pre>\n<p><a name=\"naming--PascalCase\"></a><a name=\"22.3\"></a></p>\n</li>\n<li><p><a href=\"#naming--PascalCase\">22.3</a> Use PascalCase only when naming constructors or classes. eslint: <a href=\"http://eslint.org/docs/rules/new-cap.html\"><code>new-cap</code></a> jscs: <a href=\"http://jscs.info/rule/requireCapitalizedConstructors\"><code>requireCapitalizedConstructors</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> user</span><span class=\"pun\">(</span><span class=\"pln\">options</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">name </span><span class=\"pun\">=</span><span class=\"pln\"> options</span><span class=\"pun\">.</span><span class=\"pln\">name</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"kwd\">const</span><span class=\"pln\"> bad </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> user</span><span class=\"pun\">({</span><span class=\"pln\">\n  name</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'nope'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">User</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  constructor</span><span class=\"pun\">(</span><span class=\"pln\">options</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">name </span><span class=\"pun\">=</span><span class=\"pln\"> options</span><span class=\"pun\">.</span><span class=\"pln\">name</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"kwd\">const</span><span class=\"pln\"> good </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">User</span><span class=\"pun\">({</span><span class=\"pln\">\n  name</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'yup'</span></span><span class=\"pun\">,</span><span class=\"pln\">\n</span><span class=\"pun\">});</span></code></pre>\n<p><a name=\"naming--leading-underscore\"></a><a name=\"22.4\"></a></p>\n</li>\n<li><p><a href=\"#naming--leading-underscore\">22.4</a> Use a leading underscore <code>_</code> when naming private properties. eslint: <a href=\"http://eslint.org/docs/rules/no-underscore-dangle.html\"><code>no-underscore-dangle</code></a> jscs: <a href=\"http://jscs.info/rule/disallowDanglingUnderscores\"><code>disallowDanglingUnderscores</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">__firstName__ </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Panda'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">firstName_ </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Panda'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">_firstName </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'Panda'</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"naming--self-this\"></a><a name=\"22.5\"></a></p>\n</li>\n<li><p><a href=\"#naming--self-this\">22.5</a> Donâ€™t save references to <code>this</code>. Use arrow functions or Function#bind. jscs: <a href=\"http://jscs.info/rule/disallowNodeTypes\"><code>disallowNodeTypes</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> self </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">self</span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> that </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">that</span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"kwd\">this</span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"naming--filename-matches-export\"></a><a name=\"22.6\"></a></p>\n</li>\n<li><p><a href=\"#naming--filename-matches-export\">22.6</a> If your file exports a single class, your filename should be exactly the name of the class.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// file contents</span></span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">CheckBox</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// ...</span></span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"kwd\">export</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"typ\">CheckBox</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// in some other file</span></span><span class=\"pln\">\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"typ\">CheckBox</span><span class=\"pln\"> from </span><span class=\"string\"><span class=\"str\">'./checkBox'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"typ\">CheckBox</span><span class=\"pln\"> from </span><span class=\"string\"><span class=\"str\">'./check_box'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"typ\">CheckBox</span><span class=\"pln\"> from </span><span class=\"string\"><span class=\"str\">'./CheckBox'</span></span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"naming--camelCase-default-export\"></a><a name=\"22.7\"></a></p>\n</li>\n<li><p><a href=\"#naming--camelCase-default-export\">22.7</a> Use camelCase when you export-default a function. Your filename should be identical to your functionâ€™s name.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">function</span><span class=\"pln\"> makeStyleGuide</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"kwd\">export</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> makeStyleGuide</span><span class=\"pun\">;</span></code></pre>\n<p><a name=\"naming--PascalCase-singleton\"></a><a name=\"22.8\"></a></p>\n</li>\n<li><p><a href=\"#naming--PascalCase-singleton\">22.8</a> Use PascalCase when you export a singleton / function library / bare object.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">AirbnbStyleGuide</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  es</span><span class=\"number\"><span class=\"pln\">6</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">export</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"typ\">AirbnbStyleGuide</span><span class=\"pun\">;</span></code></pre>\n</li>\n</ul><p><a href=\"#naming--descriptive\">22.1</a> Avoid single letter names. Be descriptive with your naming.</p><p><a name=\"naming--camelCase\"></a><a name=\"22.2\"></a></p><p><a href=\"#naming--camelCase\">22.2</a> Use camelCase when naming objects, functions, and instances. eslint: <a href=\"http://eslint.org/docs/rules/camelcase.html\"><code>camelcase</code></a> jscs: <a href=\"http://jscs.info/rule/requireCamelCaseOrUpperCaseIdentifiers\"><code>requireCamelCaseOrUpperCaseIdentifiers</code></a></p><p><a name=\"naming--PascalCase\"></a><a name=\"22.3\"></a></p><p><a href=\"#naming--PascalCase\">22.3</a> Use PascalCase only when naming constructors or classes. eslint: <a href=\"http://eslint.org/docs/rules/new-cap.html\"><code>new-cap</code></a> jscs: <a href=\"http://jscs.info/rule/requireCapitalizedConstructors\"><code>requireCapitalizedConstructors</code></a></p><p><a name=\"naming--leading-underscore\"></a><a name=\"22.4\"></a></p><p><a href=\"#naming--leading-underscore\">22.4</a> Use a leading underscore <code>_</code> when naming private properties. eslint: <a href=\"http://eslint.org/docs/rules/no-underscore-dangle.html\"><code>no-underscore-dangle</code></a> jscs: <a href=\"http://jscs.info/rule/disallowDanglingUnderscores\"><code>disallowDanglingUnderscores</code></a></p><p><a name=\"naming--self-this\"></a><a name=\"22.5\"></a></p><p><a href=\"#naming--self-this\">22.5</a> Donâ€™t save references to <code>this</code>. Use arrow functions or Function#bind. jscs: <a href=\"http://jscs.info/rule/disallowNodeTypes\"><code>disallowNodeTypes</code></a></p><p><a name=\"naming--filename-matches-export\"></a><a name=\"22.6\"></a></p><p><a href=\"#naming--filename-matches-export\">22.6</a> If your file exports a single class, your filename should be exactly the name of the class.</p><p><a name=\"naming--camelCase-default-export\"></a><a name=\"22.7\"></a></p><p><a href=\"#naming--camelCase-default-export\">22.7</a> Use camelCase when you export-default a function. Your filename should be identical to your functionâ€™s name.</p><p><a name=\"naming--PascalCase-singleton\"></a><a name=\"22.8\"></a></p><p><a href=\"#naming--PascalCase-singleton\">22.8</a> Use PascalCase when you export a singleton / function library / bare object.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"NAMING CONVENTIONS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-accessors\">Accessors</h2><p>  <a name=\"accessors--not-required\"></a><a name=\"23.1\"></a></p><ul>\n<li><p><a href=\"#accessors--not-required\">23.1</a> Accessor functions for properties are not required.</p>\n<p><a name=\"accessors--no-getters-setters\"></a><a name=\"23.2\"></a></p>\n</li>\n<li><p><a href=\"#accessors--no-getters-setters\">23.2</a> Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use getVal() and setVal(â€˜helloâ€™).</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\ndragon</span><span class=\"pun\">.</span><span class=\"pln\">age</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\ndragon</span><span class=\"pun\">.</span><span class=\"pln\">getAge</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\ndragon</span><span class=\"pun\">.</span><span class=\"pln\">age</span><span class=\"pun\">(</span><span class=\"number\"><span class=\"lit\">25</span></span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\ndragon</span><span class=\"pun\">.</span><span class=\"pln\">setAge</span><span class=\"pun\">(</span><span class=\"number\"><span class=\"lit\">25</span></span><span class=\"pun\">);</span></code></pre>\n<p><a name=\"accessors--boolean-prefix\"></a><a name=\"23.3\"></a></p>\n</li>\n<li><p><a href=\"#accessors--boolean-prefix\">23.3</a> If the property/method is a <code>boolean</code>, use <code>isVal()</code> or <code>hasVal()</code>.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(!</span><span class=\"pln\">dragon</span><span class=\"pun\">.</span><span class=\"pln\">age</span><span class=\"pun\">())</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(!</span><span class=\"pln\">dragon</span><span class=\"pun\">.</span><span class=\"pln\">hasAge</span><span class=\"pun\">())</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"accessors--consistent\"></a><a name=\"23.4\"></a></p>\n</li>\n<li><p><a href=\"#accessors--consistent\">23.4</a> Itâ€™s okay to create get() and set() functions, but be consistent.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Jedi</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  constructor</span><span class=\"pun\">(</span><span class=\"pln\">options </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{})</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">const</span><span class=\"pln\"> lightsaber </span><span class=\"pun\">=</span><span class=\"pln\"> options</span><span class=\"pun\">.</span><span class=\"pln\">lightsaber </span><span class=\"pun\">||</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'blue'</span></span><span class=\"pun\">;</span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"kwd\">set</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'lightsaber'</span></span><span class=\"pun\">,</span><span class=\"pln\"> lightsaber</span><span class=\"pun\">);</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">set</span><span class=\"pun\">(</span><span class=\"pln\">key</span><span class=\"pun\">,</span><span class=\"pln\"> val</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">this</span><span class=\"pun\">[</span><span class=\"pln\">key</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> val</span><span class=\"pun\">;</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n\n  </span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"pln\">key</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">[</span><span class=\"pln\">key</span><span class=\"pun\">];</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n</li>\n</ul><p><a href=\"#accessors--not-required\">23.1</a> Accessor functions for properties are not required.</p><p><a name=\"accessors--no-getters-setters\"></a><a name=\"23.2\"></a></p><p><a href=\"#accessors--no-getters-setters\">23.2</a> Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use getVal() and setVal(â€˜helloâ€™).</p><p><a name=\"accessors--boolean-prefix\"></a><a name=\"23.3\"></a></p><p><a href=\"#accessors--boolean-prefix\">23.3</a> If the property/method is a <code>boolean</code>, use <code>isVal()</code> or <code>hasVal()</code>.</p><p><a name=\"accessors--consistent\"></a><a name=\"23.4\"></a></p><p><a href=\"#accessors--consistent\">23.4</a> Itâ€™s okay to create get() and set() functions, but be consistent.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"ACCESSORS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-events\">Events</h2><p>  <a name=\"events--hash\"></a><a name=\"24.1\"></a></p><ul>\n<li><p><a href=\"#events--hash\">24.1</a> When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass a hash instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n$</span><span class=\"pun\">(</span><span class=\"kwd\">this</span><span class=\"pun\">).</span><span class=\"pln\">trigger</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'listingUpdated'</span></span><span class=\"pun\">,</span><span class=\"pln\"> listing</span><span class=\"pun\">.</span><span class=\"pln\">id</span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"pun\">...</span><span class=\"pln\">\n\n$</span><span class=\"pun\">(</span><span class=\"kwd\">this</span><span class=\"pun\">).</span><span class=\"pln\">on</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'listingUpdated'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">e</span><span class=\"pun\">,</span><span class=\"pln\"> listingId</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// do something with listingId</span></span><span class=\"pln\">\n</span><span class=\"pun\">});</span></code></pre>\n<p>prefer:</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n$</span><span class=\"pun\">(</span><span class=\"kwd\">this</span><span class=\"pun\">).</span><span class=\"pln\">trigger</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'listingUpdated'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> listingId</span><span class=\"pun\">:</span><span class=\"pln\"> listing</span><span class=\"pun\">.</span><span class=\"pln\">id </span><span class=\"pun\">});</span><span class=\"pln\">\n\n</span><span class=\"pun\">...</span><span class=\"pln\">\n\n$</span><span class=\"pun\">(</span><span class=\"kwd\">this</span><span class=\"pun\">).</span><span class=\"pln\">on</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'listingUpdated'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">e</span><span class=\"pun\">,</span><span class=\"pln\"> data</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"comment\"><span class=\"com\">// do something with data.listingId</span></span><span class=\"pln\">\n</span><span class=\"pun\">});</span></code></pre>\n</li>\n</ul><p><a href=\"#events--hash\">24.1</a> When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass a hash instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:</p><p>prefer:</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"EVENTS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-jquery\">jQuery</h2><p>  <a name=\"jquery--dollar-prefix\"></a><a name=\"25.1\"></a></p><ul>\n<li><p><a href=\"#jquery--dollar-prefix\">25.1</a> Prefix jQuery object variables with a <code>$</code>. jscs: <a href=\"http://jscs.info/rule/requireDollarBeforejQueryAssignment\"><code>requireDollarBeforejQueryAssignment</code></a></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> sidebar </span><span class=\"pun\">=</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.sidebar'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> $sidebar </span><span class=\"pun\">=</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.sidebar'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">const</span><span class=\"pln\"> $sidebarBtn </span><span class=\"pun\">=</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.sidebar-btn'</span></span><span class=\"pun\">);</span></code></pre>\n<p><a name=\"jquery--cache\"></a><a name=\"25.2\"></a></p>\n</li>\n<li><p><a href=\"#jquery--cache\">25.2</a> Cache jQuery lookups.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> setSidebar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  $</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.sidebar'</span></span><span class=\"pun\">).</span><span class=\"pln\">hide</span><span class=\"pun\">();</span><span class=\"pln\">\n\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n\n  $</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.sidebar'</span></span><span class=\"pun\">).</span><span class=\"pln\">css</span><span class=\"pun\">({</span><span class=\"pln\">\n    </span><span class=\"string\"><span class=\"str\">'background-color'</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'pink'</span></span><span class=\"pln\">\n  </span><span class=\"pun\">});</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n</span><span class=\"kwd\">function</span><span class=\"pln\"> setSidebar</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">const</span><span class=\"pln\"> $sidebar </span><span class=\"pun\">=</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.sidebar'</span></span><span class=\"pun\">);</span><span class=\"pln\">\n  $sidebar</span><span class=\"pun\">.</span><span class=\"pln\">hide</span><span class=\"pun\">();</span><span class=\"pln\">\n\n  </span><span class=\"comment\"><span class=\"com\">// ...stuff...</span></span><span class=\"pln\">\n\n  $sidebar</span><span class=\"pun\">.</span><span class=\"pln\">css</span><span class=\"pun\">({</span><span class=\"pln\">\n    </span><span class=\"string\"><span class=\"str\">'background-color'</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'pink'</span></span><span class=\"pln\">\n  </span><span class=\"pun\">});</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"jquery--queries\"></a><a name=\"25.3\"></a></p>\n</li>\n<li><p><a href=\"#jquery--queries\">25.3</a> For DOM queries use Cascading <code>$('.sidebar ul')</code> or parent &gt; child <code>$('.sidebar &gt; ul')</code>. <a href=\"http://jsperf.com/jquery-find-vs-context-sel/16\">jsPerf</a></p>\n<p><a name=\"jquery--find\"></a><a name=\"25.4\"></a></p>\n</li>\n<li><p><a href=\"#jquery--find\">25.4</a> Use <code>find</code> with scoped jQuery object queries.</p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n$</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'ul'</span></span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">'.sidebar'</span></span><span class=\"pun\">).</span><span class=\"pln\">hide</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// bad</span></span><span class=\"pln\">\n$</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.sidebar'</span></span><span class=\"pun\">).</span><span class=\"pln\">find</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'ul'</span></span><span class=\"pun\">).</span><span class=\"pln\">hide</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n$</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.sidebar ul'</span></span><span class=\"pun\">).</span><span class=\"pln\">hide</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n$</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'.sidebar &gt; ul'</span></span><span class=\"pun\">).</span><span class=\"pln\">hide</span><span class=\"pun\">();</span><span class=\"pln\">\n\n</span><span class=\"comment\"><span class=\"com\">// good</span></span><span class=\"pln\">\n$sidebar</span><span class=\"pun\">.</span><span class=\"pln\">find</span><span class=\"pun\">(</span><span class=\"string\"><span class=\"str\">'ul'</span></span><span class=\"pun\">).</span><span class=\"pln\">hide</span><span class=\"pun\">();</span></code></pre>\n</li>\n</ul><p><a href=\"#jquery--dollar-prefix\">25.1</a> Prefix jQuery object variables with a <code>$</code>. jscs: <a href=\"http://jscs.info/rule/requireDollarBeforejQueryAssignment\"><code>requireDollarBeforejQueryAssignment</code></a></p><p><a name=\"jquery--cache\"></a><a name=\"25.2\"></a></p><p><a href=\"#jquery--cache\">25.2</a> Cache jQuery lookups.</p><p><a name=\"jquery--queries\"></a><a name=\"25.3\"></a></p><p><a href=\"#jquery--queries\">25.3</a> For DOM queries use Cascading <code>$('.sidebar ul')</code> or parent &gt; child <code>$('.sidebar &gt; ul')</code>. <a href=\"http://jsperf.com/jquery-find-vs-context-sel/16\">jsPerf</a></p><p><a name=\"jquery--find\"></a><a name=\"25.4\"></a></p><p><a href=\"#jquery--find\">25.4</a> Use <code>find</code> with scoped jQuery object queries.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"JQUERY"},{"content":"<h2 id=\"airbnb-javascript-style-guide-ecmascript-5-compatibility\">ECMAScript 5 Compatibility</h2><p>  <a name=\"es5-compat--kangax\"></a><a name=\"26.1\"></a></p><ul>\n<li><a href=\"#es5-compat--kangax\">26.1</a> Refer to <a href=\"https://twitter.com/kangax/\">Kangax</a>â€˜s ES5 <a href=\"http://kangax.github.io/es5-compat-table/\">compatibility table</a>.</li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"ECMASCRIPT 5 COMPATIBILITY"},{"content":"<h2 id=\"airbnb-javascript-style-guide-ecmascript-6-styles\">ECMAScript 6 Styles</h2><p>  <a name=\"es6-styles\"></a><a name=\"27.1\"></a></p><ul>\n<li><a href=\"#es6-styles\">27.1</a> This is a collection of links to the various ES6 features.</li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"ECMASCRIPT 6 STYLES"},{"content":"<h2 id=\"airbnb-javascript-style-guide-testing\">Testing</h2><p>  <a name=\"testing--yup\"></a><a name=\"28.1\"></a></p><ul>\n<li><p><a href=\"#esting--yup\">28.1</a> <strong>Yup.</strong></p>\n<pre><code class=\"lang-javascript prettyprint prettyprinted\" style=\"\"><span class=\"kwd\">function</span><span class=\"pln\"> foo</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<p><a name=\"testing--for-real\"></a><a name=\"28.2\"></a></p>\n</li>\n<li><a href=\"#testing--for-real\">28.2</a> <strong>No, but seriously</strong>:<ul>\n<li>Whichever testing framework you use, you should be writing tests!</li>\n<li>Strive to write many small pure functions, and minimize where mutations occur.</li>\n<li>Be cautious about stubs and mocks - they can make your tests more brittle.</li>\n<li>We primarily use <a href=\"https://www.npmjs.com/package/mocha\"><code>mocha</code></a> at Airbnb. <a href=\"https://www.npmjs.com/package/tape\"><code>tape</code></a> is also used occasionally for small, separate modules.</li>\n<li>100% test coverage is a good goal to strive for, even if itâ€™s not always practical to reach it.</li>\n<li>Whenever you fix a bug, <em>write a regression test</em>. A bug fixed without a regression test is almost certainly going to break again in the future.</li>\n</ul>\n</li>\n</ul><p><a href=\"#esting--yup\">28.1</a> <strong>Yup.</strong></p><p><a name=\"testing--for-real\"></a><a name=\"28.2\"></a></p><ul>\n<li>Whichever testing framework you use, you should be writing tests!</li>\n<li>Strive to write many small pure functions, and minimize where mutations occur.</li>\n<li>Be cautious about stubs and mocks - they can make your tests more brittle.</li>\n<li>We primarily use <a href=\"https://www.npmjs.com/package/mocha\"><code>mocha</code></a> at Airbnb. <a href=\"https://www.npmjs.com/package/tape\"><code>tape</code></a> is also used occasionally for small, separate modules.</li>\n<li>100% test coverage is a good goal to strive for, even if itâ€™s not always practical to reach it.</li>\n<li>Whenever you fix a bug, <em>write a regression test</em>. A bug fixed without a regression test is almost certainly going to break again in the future.</li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"TESTING"},{"content":"<h2 id=\"airbnb-javascript-style-guide-performance\">Performance</h2><ul>\n<li><a href=\"http://www.kellegous.com/j/2013/01/26/layout-performance/\">On Layout &amp; Web Performance</a></li>\n<li><a href=\"http://jsperf.com/string-vs-array-concat/2\">String vs Array Concat</a></li>\n<li><a href=\"http://jsperf.com/try-catch-in-loop-cost\">Try/Catch Cost In a Loop</a></li>\n<li><a href=\"http://jsperf.com/bang-function\">Bang Function</a></li>\n<li><a href=\"http://jsperf.com/jquery-find-vs-context-sel/13\">jQuery Find vs Context, Selector</a></li>\n<li><a href=\"http://jsperf.com/innerhtml-vs-textcontent-for-script-text\">innerHTML vs textContent for script text</a></li>\n<li><a href=\"http://jsperf.com/ya-string-concat\">Long String Concatenation</a></li>\n<li>Loadingâ€¦</li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"PERFORMANCE"},{"content":"<h2 id=\"airbnb-javascript-style-guide-resources\">Resources</h2><p><strong>Learning ES6</strong></p><ul>\n<li><a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\">Draft ECMA 2015 (ES6) Spec</a></li>\n<li><a href=\"http://exploringjs.com/\">ExploringJS</a></li>\n<li><a href=\"https://kangax.github.io/compat-table/es6/\">ES6 Compatibility Table</a></li>\n<li><a href=\"http://es6-features.org/\">Comprehensive Overview of ES6 Features</a></li>\n</ul><p><strong>Read This</strong></p><ul>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html\">Standard ECMA-262</a></li>\n</ul><p><strong>Tools</strong></p><ul>\n<li>Code Style Linters<ul>\n<li><a href=\"http://eslint.org/\">ESlint</a> - <a href=\"https://github.com/airbnb/javascript/blob/master/linters/.eslintrc\">Airbnb Style .eslintrc</a></li>\n<li><a href=\"http://jshint.com/\">JSHint</a> - <a href=\"https://github.com/airbnb/javascript/blob/master/linters/.jshintrc\">Airbnb Style .jshintrc</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs\">JSCS</a> - <a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json\">Airbnb Style Preset</a></li>\n</ul>\n</li>\n</ul><ul>\n<li><a href=\"http://eslint.org/\">ESlint</a> - <a href=\"https://github.com/airbnb/javascript/blob/master/linters/.eslintrc\">Airbnb Style .eslintrc</a></li>\n<li><a href=\"http://jshint.com/\">JSHint</a> - <a href=\"https://github.com/airbnb/javascript/blob/master/linters/.jshintrc\">Airbnb Style .jshintrc</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs\">JSCS</a> - <a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json\">Airbnb Style Preset</a></li>\n</ul><p><strong>Other Style Guides</strong></p><ul>\n<li><a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\">Google JavaScript Style Guide</a></li>\n<li><a href=\"http://contribute.jquery.org/style-guide/js/\">jQuery Core Style Guidelines</a></li>\n<li><a href=\"https://github.com/rwaldron/idiomatic.js\">Principles of Writing Consistent, Idiomatic JavaScript</a></li>\n</ul><p><strong>Other Styles</strong></p><ul>\n<li><a href=\"https://gist.github.com/cjohansen/4135065\">Naming this in nested functions</a> - Christian Johansen</li>\n<li><a href=\"https://github.com/airbnb/javascript/issues/52\">Conditional Callbacks</a> - Ross Allen</li>\n<li><a href=\"http://sideeffect.kr/popularconvention/#javascript\">Popular JavaScript Coding Conventions on Github</a> - JeongHoon Byun</li>\n<li><a href=\"http://benalman.com/news/2012/05/multiple-var-statements-javascript/\">Multiple var statements in JavaScript, not superfluous</a> - Ben Alman</li>\n</ul><p><strong>Further Reading</strong></p><ul>\n<li><a href=\"http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/\">Understanding JavaScript Closures</a> - Angus Croll</li>\n<li><a href=\"http://www.2ality.com/2013/06/basic-javascript.html\">Basic JavaScript for the impatient programmer</a> - Dr. Axel Rauschmayer</li>\n<li><a href=\"http://youmightnotneedjquery.com/\">You Might Not Need jQuery</a> - Zack Bloom &amp; Adam Schwartz</li>\n<li><a href=\"https://github.com/lukehoban/es6features\">ES6 Features</a> - Luke Hoban</li>\n<li><a href=\"https://github.com/bendc/frontend-guidelines\">Frontend Guidelines</a> - Benjamin De Cock</li>\n</ul><p><strong>Books</strong></p><ul>\n<li><a href=\"http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\">JavaScript: The Good Parts</a> - Douglas Crockford</li>\n<li><a href=\"http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752\">JavaScript Patterns</a> - Stoyan Stefanov</li>\n<li><a href=\"http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X\">Pro JavaScript Design Patterns</a>  - Ross Harmes and Dustin Diaz</li>\n<li><a href=\"http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309\">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a> - Steve Souders</li>\n<li><a href=\"http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680\">Maintainable JavaScript</a> - Nicholas C. Zakas</li>\n<li><a href=\"http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X\">JavaScript Web Applications</a> - Alex MacCaw</li>\n<li><a href=\"http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273\">Pro JavaScript Techniques</a> - John Resig</li>\n<li><a href=\"http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595\">Smashing Node.js: JavaScript Everywhere</a> - Guillermo Rauch</li>\n<li><a href=\"http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X\">Secrets of the JavaScript Ninja</a> - John Resig and Bear Bibeault</li>\n<li><a href=\"http://humanjavascript.com/\">Human JavaScript</a> - Henrik Joreteg</li>\n<li><a href=\"http://superherojs.com/\">Superhero.js</a> - Kim Joar Bekkelund, Mads MobÃ¦k, &amp; Olav Bjorkoy</li>\n<li><a href=\"http://jsbooks.revolunet.com/\">JSBooks</a> - Julien Bouquillon</li>\n<li><a href=\"https://www.manning.com/books/third-party-javascript\">Third Party JavaScript</a> - Ben Vinegar and Anton Kovalyov</li>\n<li><a href=\"http://amzn.com/0321812182\">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</a> - David Herman</li>\n<li><a href=\"http://eloquentjavascript.net/\">Eloquent JavaScript</a> - Marijn Haverbeke</li>\n<li><a href=\"http://shop.oreilly.com/product/0636920033769.do\">You Donâ€™t Know JS: ES6 &amp; Beyond</a> - Kyle Simpson</li>\n</ul><p><strong>Blogs</strong></p><ul>\n<li><a href=\"http://dailyjs.com/\">DailyJS</a></li>\n<li><a href=\"http://javascriptweekly.com/\">JavaScript Weekly</a></li>\n<li><a href=\"http://javascriptweblog.wordpress.com/\">JavaScript, JavaScriptâ€¦</a></li>\n<li><a href=\"https://bocoup.com/weblog\">Bocoup Weblog</a></li>\n<li><a href=\"http://www.adequatelygood.com/\">Adequately Good</a></li>\n<li><a href=\"https://www.nczonline.net/\">NCZOnline</a></li>\n<li><a href=\"http://perfectionkills.com/\">Perfection Kills</a></li>\n<li><a href=\"http://benalman.com/\">Ben Alman</a></li>\n<li><a href=\"http://dmitry.baranovskiy.com/\">Dmitry Baranovskiy</a></li>\n<li><a href=\"http://dustindiaz.com/\">Dustin Diaz</a></li>\n<li><a href=\"http://code.tutsplus.com/?s=javascript\">nettuts</a></li>\n</ul><p><strong>Podcasts</strong></p><ul>\n<li><a href=\"https://devchat.tv/js-jabber/\">JavaScript Jabber</a></li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"RESOURCES"},{"content":"<h2 id=\"airbnb-javascript-style-guide-in-the-wild\">In the Wild</h2><p>  This is a list of organizations that are using this style guide. Send us a pull request and weâ€™ll add you to the list.</p><ul>\n<li><strong>Aan Zee</strong>: <a href=\"https://github.com/AanZee/javascript\">AanZee/javascript</a></li>\n<li><strong>Adult Swim</strong>: <a href=\"https://github.com/adult-swim/javascript\">adult-swim/javascript</a></li>\n<li><strong>Airbnb</strong>: <a href=\"https://github.com/airbnb/javascript\">airbnb/javascript</a></li>\n<li><strong>Apartmint</strong>: <a href=\"https://github.com/apartmint/javascript\">apartmint/javascript</a></li>\n<li><strong>Ascribe</strong>: <a href=\"https://github.com/ascribe/javascript\">ascribe/javascript</a></li>\n<li><strong>Avalara</strong>: <a href=\"https://github.com/avalara/javascript\">avalara/javascript</a></li>\n<li><strong>Avant</strong>: <a href=\"https://github.com/avantcredit/javascript\">avantcredit/javascript</a></li>\n<li><strong>Billabong</strong>: <a href=\"https://github.com/billabong/javascript\">billabong/javascript</a></li>\n<li><strong>Bisk</strong>: <a href=\"https://github.com/Bisk/javascript/\">bisk/javascript</a></li>\n<li><strong>Blendle</strong>: <a href=\"https://github.com/blendle/javascript\">blendle/javascript</a></li>\n<li><strong>Brainshark</strong>: <a href=\"https://github.com/brainshark/javascript\">brainshark/javascript</a></li>\n<li><strong>ComparaOnline</strong>: <a href=\"https://github.com/comparaonline/javascript-style-guide\">comparaonline/javascript</a></li>\n<li><strong>Compass Learning</strong>: <a href=\"https://github.com/compasslearning/javascript-style-guide\">compasslearning/javascript-style-guide</a></li>\n<li><strong>DailyMotion</strong>: <a href=\"https://github.com/dailymotion/javascript\">dailymotion/javascript</a></li>\n<li><strong>Digitpaint</strong> <a href=\"https://github.com/digitpaint/javascript\">digitpaint/javascript</a></li>\n<li><strong>Ecosia</strong>: <a href=\"https://github.com/ecosia/javascript\">ecosia/javascript</a></li>\n<li><strong>Evernote</strong>: <a href=\"https://github.com/evernote/javascript-style-guide\">evernote/javascript-style-guide</a></li>\n<li><strong>Evolution Gaming</strong>: <a href=\"https://github.com/evolution-gaming/javascript\">evolution-gaming/javascript</a></li>\n<li><strong>ExactTarget</strong>: <a href=\"https://github.com/ExactTarget/javascript\">ExactTarget/javascript</a></li>\n<li><strong>Expensify</strong> <a href=\"https://github.com/Expensify/Style-Guide/blob/master/javascript.md\">Expensify/Style-Guide</a></li>\n<li><strong>Flexberry</strong>: <a href=\"https://github.com/Flexberry/javascript-style-guide\">Flexberry/javascript-style-guide</a></li>\n<li><strong>Gawker Media</strong>: <a href=\"https://github.com/gawkermedia/javascript\">gawkermedia/javascript</a></li>\n<li><strong>General Electric</strong>: <a href=\"https://github.com/GeneralElectric/javascript\">GeneralElectric/javascript</a></li>\n<li><strong>GoodData</strong>: <a href=\"https://github.com/gooddata/gdc-js-style\">gooddata/gdc-js-style</a></li>\n<li><strong>Grooveshark</strong>: <a href=\"https://github.com/grooveshark/javascript\">grooveshark/javascript</a></li>\n<li><strong>How About We</strong>: <a href=\"https://github.com/howaboutwe/javascript-style-guide\">howaboutwe/javascript</a></li>\n<li><strong>Huballin</strong>: <a href=\"https://github.com/huballin/javascript\">huballin/javascript</a></li>\n<li><strong>HubSpot</strong>: <a href=\"https://github.com/HubSpot/javascript\">HubSpot/javascript</a></li>\n<li><strong>Hyper</strong>: <a href=\"https://github.com/hyperoslo/javascript-playbook/blob/master/style.md\">hyperoslo/javascript-playbook</a></li>\n<li><strong>InfoJobs</strong>: <a href=\"https://github.com/InfoJobs/JavaScript-Style-Guide\">InfoJobs/JavaScript-Style-Guide</a></li>\n<li><strong>Intent Media</strong>: <a href=\"https://github.com/intentmedia/javascript\">intentmedia/javascript</a></li>\n<li><strong>Jam3</strong>: <a href=\"https://github.com/Jam3/Javascript-Code-Conventions\">Jam3/Javascript-Code-Conventions</a></li>\n<li><strong>JeopardyBot</strong>: <a href=\"https://github.com/kesne/jeopardy-bot/blob/master/STYLEGUIDE.md\">kesne/jeopardy-bot</a></li>\n<li><strong>JSSolutions</strong>: <a href=\"https://github.com/JSSolutions/javascript\">JSSolutions/javascript</a></li>\n<li><strong>Kinetica Solutions</strong>: <a href=\"https://github.com/kinetica/Javascript-style-guide\">kinetica/javascript</a></li>\n<li><strong>Mighty Spring</strong>: <a href=\"https://github.com/mightyspring/javascript\">mightyspring/javascript</a></li>\n<li><strong>MinnPost</strong>: <a href=\"https://github.com/MinnPost/javascript\">MinnPost/javascript</a></li>\n<li><strong>MitocGroup</strong>: <a href=\"https://github.com/MitocGroup/javascript\">MitocGroup/javascript</a></li>\n<li><strong>ModCloth</strong>: <a href=\"https://github.com/modcloth/javascript\">modcloth/javascript</a></li>\n<li><strong>Money Advice Service</strong>: <a href=\"https://github.com/moneyadviceservice/javascript\">moneyadviceservice/javascript</a></li>\n<li><strong>Muber</strong>: <a href=\"https://github.com/muber/javascript\">muber/javascript</a></li>\n<li><strong>National Geographic</strong>: <a href=\"https://github.com/natgeo/javascript\">natgeo/javascript</a></li>\n<li><strong>National Park Service</strong>: <a href=\"https://github.com/nationalparkservice/javascript\">nationalparkservice/javascript</a></li>\n<li><strong>Nimbl3</strong>: <a href=\"https://github.com/nimbl3/javascript\">nimbl3/javascript</a></li>\n<li><strong>Orion Health</strong>: <a href=\"https://github.com/orionhealth/javascript\">orionhealth/javascript</a></li>\n<li><strong>OutBoxSoft</strong>: <a href=\"https://github.com/OutBoxSoft/javascript\">OutBoxSoft/javascript</a></li>\n<li><strong>Peerby</strong>: <a href=\"https://github.com/Peerby/javascript\">Peerby/javascript</a></li>\n<li><strong>Razorfish</strong>: <a href=\"https://github.com/razorfish/javascript-style-guide\">razorfish/javascript-style-guide</a></li>\n<li><strong>reddit</strong>: <a href=\"https://github.com/reddit/styleguide/tree/master/javascript\">reddit/styleguide/javascript</a></li>\n<li><strong>React</strong>: <a href=\"https://github.com/facebook/react/blob/master/CONTRIBUTING.md#style-guide\">/facebook/react/blob/master/CONTRIBUTING.md#style-guide</a></li>\n<li><strong>REI</strong>: <a href=\"https://github.com/rei/code-style-guides/blob/master/docs/javascript.md\">reidev/js-style-guide</a></li>\n<li><strong>Ripple</strong>: <a href=\"https://github.com/ripple/javascript-style-guide\">ripple/javascript-style-guide</a></li>\n<li><strong>SeekingAlpha</strong>: <a href=\"https://github.com/seekingalpha/javascript-style-guide\">seekingalpha/javascript-style-guide</a></li>\n<li><strong>Shutterfly</strong>: <a href=\"https://github.com/shutterfly/javascript\">shutterfly/javascript</a></li>\n<li><strong>Springload</strong>: <a href=\"https://github.com/springload/javascript\">springload/javascript</a></li>\n<li><strong>StudentSphere</strong>: <a href=\"https://github.com/studentsphere/guide-javascript\">studentsphere/javascript</a></li>\n<li><strong>Target</strong>: <a href=\"https://github.com/target/javascript\">target/javascript</a></li>\n<li><strong>TheLadders</strong>: <a href=\"https://github.com/TheLadders/javascript\">TheLadders/javascript</a></li>\n<li><strong>T4R Technology</strong>: <a href=\"https://github.com/T4R-Technology/javascript\">T4R-Technology/javascript</a></li>\n<li><strong>VoxFeed</strong>: <a href=\"https://github.com/VoxFeed/javascript-style-guide\">VoxFeed/javascript-style-guide</a></li>\n<li><strong>WeBox Studio</strong>: <a href=\"https://github.com/weboxstudio/javascript\">weboxstudio/javascript</a></li>\n<li><strong>Weggo</strong>: <a href=\"https://github.com/Weggo/javascript\">Weggo/javascript</a></li>\n<li><strong>Zillow</strong>: <a href=\"https://github.com/zillow/javascript\">zillow/javascript</a></li>\n<li><strong>ZocDoc</strong>: <a href=\"https://github.com/ZocDoc/javascript\">ZocDoc/javascript</a></li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"IN THE WILD"},{"content":"<h2 id=\"airbnb-javascript-style-guide-translation\">Translation</h2><p>  This style guide is also available in other languages:</p><ul>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png\" alt=\"br\"> <strong>Brazilian Portuguese</strong>: <a href=\"https://github.com/armoucar/javascript-style-guide\">armoucar/javascript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png\" alt=\"bg\"> <strong>Bulgarian</strong>: <a href=\"https://github.com/borislavvv/javascript\">borislavvv/javascript</a></li>\n<li><img src=\"https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png\" alt=\"ca\"> <strong>Catalan</strong>: <a href=\"https://github.com/fpmweb/javascript-style-guide\">fpmweb/javascript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png\" alt=\"cn\"> <strong>Chinese (Simplified)</strong>: <a href=\"https://github.com/sivan/javascript-style-guide\">sivan/javascript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png\" alt=\"tw\"> <strong>Chinese (Traditional)</strong>: <a href=\"https://github.com/jigsawye/javascript\">jigsawye/javascript</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png\" alt=\"fr\"> <strong>French</strong>: <a href=\"https://github.com/nmussy/javascript-style-guide\">nmussy/javascript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png\" alt=\"de\"> <strong>German</strong>: <a href=\"https://github.com/timofurrer/javascript-style-guide\">timofurrer/javascript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png\" alt=\"it\"> <strong>Italian</strong>: <a href=\"https://github.com/sinkswim/javascript-style-guide\">sinkswim/javascript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png\" alt=\"jp\"> <strong>Japanese</strong>: <a href=\"https://github.com/mitsuruog/javacript-style-guide\">mitsuruog/javacript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png\" alt=\"kr\"> <strong>Korean</strong>: <a href=\"https://github.com/tipjs/javascript-style-guide\">tipjs/javascript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png\" alt=\"pl\"> <strong>Polish</strong>: <a href=\"https://github.com/mjurczyk/javascript\">mjurczyk/javascript</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png\" alt=\"ru\"> <strong>Russian</strong>: <a href=\"https://github.com/uprock/javascript\">uprock/javascript</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png\" alt=\"es\"> <strong>Spanish</strong>: <a href=\"https://github.com/paolocarrasco/javascript-style-guide\">paolocarrasco/javascript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png\" alt=\"th\"> <strong>Thai</strong>: <a href=\"https://github.com/lvarayut/javascript-style-guide\">lvarayut/javascript-style-guide</a></li>\n<li><img src=\"https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png\" alt=\"vn\"> <strong>Vietnam</strong>: <a href=\"https://github.com/giangpii/javascript-style-guide\">giangpii/javascript-style-guide</a></li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"TRANSLATION"},{"content":"<h2 id=\"airbnb-javascript-style-guide-the-javascript-style-guide-guide\">The JavaScript Style Guide Guide</h2><ul>\n<li><a href=\"https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide\">Reference</a></li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"THE JAVASCRIPT STYLE GUIDE GUIDE"},{"content":"<h2 id=\"airbnb-javascript-style-guide-chat-with-us-about-javascript\">Chat With Us About JavaScript</h2><ul>\n<li>Find us on <a href=\"https://gitter.im/airbnb/javascript\">gitter</a>.</li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"CHAT WITH US ABOUT JAVASCRIPT"},{"content":"<h2 id=\"airbnb-javascript-style-guide-contributors\">Contributors</h2><ul>\n<li><a href=\"https://github.com/airbnb/javascript/graphs/contributors\">View Contributors</a></li>\n</ul>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"CONTRIBUTORS"},{"content":"<h2 id=\"airbnb-javascript-style-guide-license\">License</h2><p>(The MIT License)</p><p>Copyright (c) 2014-2016 Airbnb</p><p>Permission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\nâ€˜Softwareâ€™), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:</p><p>The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED â€˜AS ISâ€™, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"LICENSE"},{"content":"<h2 id=\"airbnb-javascript-style-guide-amendments\">Amendments</h2><p>We encourage you to fork this guide and change the rules to fit your teamâ€™s style guide. Below, you may list some amendments to the style guide. This allows you to periodically update your style guide without having to deal with merge conflicts.</p>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"AMENDMENTS"},{"content":"<h1 id=\"\">};</h1>","link":"./doc/guide/README.html","spaLink":"#/doc/guide/README","title":"};"}]